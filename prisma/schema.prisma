// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  HIDDEN
  PRIVATE
  PUBLIC
}

enum TermType {
  QUARTER
  TRIMESTER
  SEMESTER
  SUMMER
}

enum FlowType {
  LECTURE
  ASSIGNMENT
  NOTE
  EXAM
}

//holds user information. STANDARD: NULL IS A DELETED USER
model User {
  UserID             Int         @id @default(autoincrement())
  CreatedTime        DateTime    @default(now())
  SetupComplete      Boolean     @default(false)
  SupabaseID         String
  Email              String      @unique
  Name               String?
  Username           String?
  ProfilePictureLink String?
  DefaultVisibility  Visibility?
  FK_School          School?     @relation(fields: [FK_SchoolID], references: [SchoolID], onDelete: Cascade, onUpdate: Cascade)
  FK_SchoolID        Int?
  FK_Terms           Term[]
  //FK_FlowTags       FlowTag[]
}

model Term {
  TermID          Int            @id @default(autoincrement())
  CreatedTime     DateTime       @default(now())
  TermType        TermType
  TermName        String?
  FK_User         User?          @relation(fields: [FK_UserID], references: [UserID], onDelete: Cascade, onUpdate: Cascade)
  FK_UserID       Int?
  FK_School       School?        @relation(fields: [FK_SchoolID], references: [SchoolID], onDelete: Cascade, onUpdate: Cascade)
  FK_SchoolID     Int?
  FK_CourseOnTerm CourseOnTerm[]
}

model CourseOnTerm {
  CourseOnTermID Int      @id @default(autoincrement())
  CreatedTime    DateTime @default(now())
  FK_Course      Course   @relation(fields: [FK_CourseID], references: [CourseID], onDelete: Cascade, onUpdate: Cascade)
  FK_CourseID    Int
  FK_Term        Term     @relation(fields: [FK_TermID], references: [TermID], onDelete: Cascade, onUpdate: Cascade)
  FK_TermID      Int
  FK_Flows       Flow[]

}

model School {
  SchoolID        Int         @id @default(autoincrement())
  Name            String
  HasClassSupport Boolean
  SearchIndex     String?
  TermType        TermType?
  FK_Course       Course[]
  FK_User         User[]
  FK_Professor    Professor[]
  Term            Term[]
}

model Course {
  CourseID         Int            @id @default(autoincrement())
  CreatedTime      DateTime       @default(now())
  IsOfficial       Boolean        @default(false)
  Term             String         @default("Fall 2022")
  Code             String?
  Title            String?
  FK_School        School?        @relation(fields: [FK_SchoolID], references: [SchoolID], onDelete: SetNull, onUpdate: Cascade)
  FK_SchoolID      Int?
  FK_Professor     Professor?     @relation(fields: [FK_ProfessorID], references: [ProfessorID])
  FK_ProfessorID   Int?
  FK_TermsOnCourse CourseOnTerm[]

}

model Professor {
  ProfessorID Int      @id @default(autoincrement())
  FK_Courses  Course[]
  FK_School   School?  @relation(fields: [FK_SchoolID], references: [SchoolID], onDelete: SetNull, onUpdate: Cascade)
  FK_SchoolID Int?
  Name        String
  Email       String?
}

model Flow {
  FlowID             Int              @id @default(autoincrement())
  CreatedTime        DateTime         @default(now())
  //FK_Tags            FlowTagOnFlow[]
  FK_FlashCardStacks FlashCardStack[]
  Title              String?
  Body               String?
  Visibility         Visibility?
  FK_CourseOnTerm    CourseOnTerm?    @relation(fields: [FK_CourseOnTermID], references: [CourseOnTermID])
  FK_CourseOnTermID  Int?
}

//creates many-to-many for tags and flows (flows can be related to many tags, and tags can be related to many flows)
//model FlowTagOnFlow {
//  FlowTagOnFlowID Int      @id @default(autoincrement())
// HOLDER          String? //This is used to avoid updateMany (bug?) error message. Happens in join tables with only id/fks
//  FK_Flow         Flow?    @relation(fields: [FK_FlowID], references: [FlowID], onDelete: Cascade, onUpdate: Cascade)
// FK_FlowID       Int?
// FK_FlowTag      FlowTag? @relation(fields: [FK_FlowTagID], references: [FlowTagID], onDelete: Cascade, onUpdate: Cascade)
//  FK_FlowTagID    Int?
//}

//tags for flows (Homework, Lecture, Recitation)
//model FlowTag {
//  FlowTagID   Int             @id @default(autoincrement())
//  CreatedTime DateTime        @default(now())
//  FK_User     User?           @relation(fields: [FK_UserID], references: [UserID], onDelete: SetNull, onUpdate: Cascade)
// FK_UserID   Int?
// FK_Flows    FlowTagOnFlow[]
//  Public      Boolean         @default(false)
// Name        String
// Term        Term?           @relation(fields: [termTermID], references: [TermID])
// termTermID  Int?
//}

model FlashCardStack {
  FlashCardStackID Int         @id @default(autoincrement())
  CreatedTime      DateTime    @default(now())
  FK_Flow          Flow?       @relation(fields: [FK_FlowID], references: [FlowID], onDelete: SetNull, onUpdate: Cascade)
  FK_FlowID        Int?
  FlashCards       FlashCard[]
  Title            String?     @default("Untitled")
}

model FlashCard {
  FlashCardID         Int             @id @default(autoincrement())
  CreatedTime         DateTime        @default(now())
  FK_FlashCardStack   FlashCardStack? @relation(fields: [FK_FlashCardStackID], references: [FlashCardStackID], onDelete: SetNull, onUpdate: Cascade)
  FK_FlashCardStackID Int?
  Position            Int
  Front               String?
  Back                String?
}
