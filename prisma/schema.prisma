// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  HIDDEN
  PRIVATE
  PUBLIC
}

//holds user information. STANDARD: NULL IS A DELETED USER
model User {
  userId             String           @id @default(cuid())
  name               String?
  email              String?          @unique
  emailVerified      DateTime?
  image              String?
  defaultVisibility  Visibility?
  FK_Courses         CourseOnUser[]
  FK_Flows           Flow[]
  FK_FlowTags        FlowTag[]
  FK_FlashCardStacks FlashCardStack[]
}

model CourseOnUser {
  courseOnUserId Int     @id @default(autoincrement())
  HOLDER         String? //This is used to avoid updateMany (bug?) error message. Happens in join tables with only id/fks
  FK_User        User?   @relation(fields: [FK_UserId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  FK_UserId      String?
  FK_Course      Course? @relation(fields: [FK_CourseId], references: [courseId], onDelete: Cascade, onUpdate: Cascade)
  FK_CourseId    Int?
}

model Course {
  courseId      Int            @id @default(autoincrement())
  createdTime   DateTime       @default(now())
  FK_School     School?        @relation(fields: [FK_SchoolId], references: [schoolId], onDelete: SetNull, onUpdate: Cascade)
  FK_SchoolId   Int?
  FK_Professors Professor[]
  FK_Users      CourseOnUser[]
  official      Boolean        @default(false)
  code          String?
  title         String?
  term          String?
}

model School {
  schoolId     Int      @id @default(autoincrement())
  FK_Course    Course[]
  name         String
  classSupport Boolean
}

model Professor {
  professorId Int     @id @default(autoincrement())
  FK_Course   Course? @relation(fields: [FK_CourseId], references: [courseId], onDelete: SetNull, onUpdate: Cascade)
  FK_CourseId Int?
  name        String
}

model Flow {
  flowId             Int              @id @default(autoincrement())
  createdTime        DateTime         @default(now())
  FK_User            User?            @relation(fields: [FK_UserId], references: [userId], onDelete: SetNull, onUpdate: Cascade)
  FK_UserId          String?
  FK_Tags            FlowTagOnFlow[]
  FK_FlashCardStacks FlashCardStack[]
  title              String?
  body               String?
  visibility         Visibility?
}

//creates many-to-many for tags and flows (flows can be related to many tags, and tags can be related to many flows)
model FlowTagOnFlow {
  flowTagOnFlowId Int      @id @default(autoincrement())
  HOLDER          String? //This is used to avoid updateMany (bug?) error message. Happens in join tables with only id/fks
  FK_Flow         Flow?    @relation(fields: [FK_FlowId], references: [flowId], onDelete: Cascade, onUpdate: Cascade)
  FK_FlowId       Int?
  FK_FlowTag      FlowTag? @relation(fields: [FK_FlowTagId], references: [FlowTagId], onDelete: Cascade, onUpdate: Cascade)
  FK_FlowTagId    Int?
}

//tags for flows (Homework, Lecture, Recitation)
model FlowTag {
  FlowTagId   Int             @id @default(autoincrement())
  createdTime DateTime        @default(now())
  FK_User     User?           @relation(fields: [FK_UserId], references: [userId], onDelete: SetNull, onUpdate: Cascade)
  FK_UserId   String?
  FK_Flows    FlowTagOnFlow[]
  public      Boolean         @default(false)
  name        String
}

model FlashCardStack {
  flashCardStackId Int         @id @default(autoincrement())
  createdTime      DateTime    @default(now())
  FK_Flow          Flow?       @relation(fields: [FK_FlowId], references: [flowId], onDelete: SetNull, onUpdate: Cascade)
  FK_FlowId        Int?
  FK_User          User?       @relation(fields: [FK_UserId], references: [userId], onDelete: SetNull, onUpdate: Cascade)
  FK_UserId        String?
  FK_Flashcards    FlashCard[]
  title            String?     @default("Untitled")
}

model FlashCard {
  flashCardId         Int             @id @default(autoincrement())
  createdTime         DateTime        @default(now())
  FK_FlashCardStack   FlashCardStack? @relation(fields: [FK_FlashCardStackId], references: [flashCardStackId], onDelete: SetNull, onUpdate: Cascade)
  FK_FlashCardStackId Int?
  position            Int
  front               String?
  back                String?
}
