// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SetupStep {
  PROFILE
  EDUCATION
  COMMUNITY
  COMPLETE
}

enum Visibility {
  HIDDEN
  PRIVATE
  PUBLIC
}

enum TermType {
  QUARTER
  TRIMESTER
  SEMESTER
  SUMMER
}

enum FlowType {
  LECTURE
  DISCUSSION
  NOTE
  ASSIGNMENT
  ASSESSMENT
  SYNTHESIS
}

enum TaskType {
  WORK_ON
  DUE
  REVIEW
}

model Setting {
  SettingID                Int       @id @default(autoincrement())
  HasSeenWelcomeMessage    Boolean?  @default(false)
  LastSeenWelcomeMessageAt DateTime? @default(now())
  FK_User                  User?     @relation(fields: [FK_UserID], references: [UserID], onDelete: Cascade, onUpdate: Cascade)
  FK_UserID                Int       @unique
}

model AutomationLog {
  AutomationLogID             Int                     @id @default(autoincrement())
  Time                        DateTime                @default(now())
  Success                     Boolean                 @default(false)
  Message                     String                  @default("")
  FileID                      String?
  FK_CourseOnTermAutomation   CourseOnTermAutomation? @relation(fields: [FK_CourseOnTermAutomationID], references: [CourseOnTermAutomationID], onDelete: Cascade, onUpdate: Cascade)
  FK_CourseOnTermAutomationID Int?
}

model CourseOnTermAutomation {
  CourseOnTermAutomationID Int             @id @default(autoincrement())
  FolderID                 String          @default("No Folder Id")
  DefaultType              FlowType        @default(LECTURE)
  DefaultVisibility        Visibility      @default(PUBLIC)
  AutomationLog            AutomationLog[]
  FK_Automation            Automation?     @relation(fields: [FK_AutomationID], references: [AutomationID], onDelete: Cascade, onUpdate: Cascade)
  FK_AutomationID          Int?
  FK_CourseOnTerm          CourseOnTerm?   @relation(fields: [FK_CourseOnTermID], references: [CourseOnTermID], onDelete: Cascade, onUpdate: Cascade)
  FK_CourseOnTermID        Int?
}

model Automation {
  AutomationID            Int                      @id @default(autoincrement())
  RefreshToken            String                   @unique
  CourseOnTermAutomations CourseOnTermAutomation[]
  FK_User                 User?                    @relation(fields: [FK_UserID], references: [UserID], onDelete: Cascade, onUpdate: Cascade)
  FK_UserID               Int                      @unique
}

model UserOnStudyGroup {
  UserOnStudyGroupID Int         @id @default(autoincrement())
  SendDate           DateTime    @default(now())
  AcceptDate         DateTime?
  RemoveDate         DateTime?
  FK_User            User?       @relation(fields: [FK_UserID], references: [UserID], onDelete: Cascade, onUpdate: Cascade)
  FK_UserID          Int?
  FK_StudyGroup      StudyGroup? @relation(fields: [FK_StudyGroupID], references: [StudyGroupID], onDelete: Cascade, onUpdate: Cascade)
  FK_StudyGroupID    Int?
}

model StudyGroup {
  StudyGroupID        Int                @id @default(autoincrement())
  Name                String
  FK_User             User?              @relation(fields: [FK_UserID], references: [UserID], onDelete: Cascade, onUpdate: Cascade)
  FK_UserID           Int
  FK_UserOnStudyGroup UserOnStudyGroup[]
}

// holds user information. STANDARD: NULL IS A DELETED USER
model User {
  UserID               Int                @id @default(autoincrement())
  CreatedTime          DateTime           @default(now())
  SetupStep            SetupStep          @default(PROFILE)
  SupabaseID           String
  DefaultVisibility    Visibility         @default(PUBLIC)
  Email                String             @unique
  Name                 String?
  Username             String?
  ProfilePictureLink   String?
  FK_School            School?            @relation(fields: [FK_SchoolID], references: [SchoolID], onDelete: Cascade, onUpdate: Cascade)
  FK_SchoolID          Int?
  FK_Terms             Term[]
  //FK_FlowTags       FlowTag[]
  FK_Task              Task[]
  FK_Settings          Setting?
  FK_FlowView          FlowView[]
  FK_Flow              Flow[]
  FK_Automation        Automation[]
  FK_StudyGroups       StudyGroup[]
  FK_UserOnStudyGroups UserOnStudyGroup[]
}

model Term {
  TermID          Int            @id @default(autoincrement())
  CreatedTime     DateTime       @default(now())
  TermType        TermType
  TermName        String?
  FK_User         User?          @relation(fields: [FK_UserID], references: [UserID], onDelete: Cascade, onUpdate: Cascade)
  FK_UserID       Int?
  FK_School       School?        @relation(fields: [FK_SchoolID], references: [SchoolID], onDelete: Cascade, onUpdate: Cascade)
  FK_SchoolID     Int?
  FK_CourseOnTerm CourseOnTerm[]
}

model Course {
  CourseID       Int            @id @default(autoincrement())
  CreatedTime    DateTime       @default(now())
  IsOfficial     Boolean        @default(false)
  Term           String         @default("Fall 2022")
  Code           String?
  Title          String?
  FK_School      School?        @relation(fields: [FK_SchoolID], references: [SchoolID], onDelete: SetNull, onUpdate: Cascade)
  FK_SchoolID    Int?
  FK_Professor   Professor?     @relation(fields: [FK_ProfessorID], references: [ProfessorID])
  FK_ProfessorID Int?
  CourseOnTerm   CourseOnTerm[]
}

model CourseOnTerm {
  CourseOnTermID         Int                      @id @default(autoincrement())
  CreatedTime            DateTime                 @default(now())
  Index                  Int                      @default(autoincrement())
  Color                  String                   @default("bg-sky-500")
  Nickname               String?
  IsNew                  Boolean                  @default(true)
  FK_Course              Course?                  @relation(fields: [FK_CourseID], references: [CourseID], onDelete: SetNull, onUpdate: Cascade)
  FK_CourseID            Int?
  FK_Term                Term?                    @relation(fields: [FK_TermID], references: [TermID], onDelete: SetNull, onUpdate: Cascade)
  FK_TermID              Int?
  FK_Flows               Flow[]
  FK_Tasks               Task[]
  CourseOnTermAutomation CourseOnTermAutomation[]
}

model School {
  SchoolID        Int         @id @default(autoincrement())
  Name            String
  HasClassSupport Boolean
  SearchIndex     String?
  TermType        TermType?
  FK_Course       Course[]
  FK_User         User[]
  FK_Professor    Professor[]
  Term            Term[]
}

model Professor {
  ProfessorID Int      @id @default(autoincrement())
  FK_Courses  Course[]
  FK_School   School?  @relation(fields: [FK_SchoolID], references: [SchoolID], onDelete: SetNull, onUpdate: Cascade)
  FK_SchoolID Int?
  Name        String
  Email       String?
}

model Flow {
  FlowID             String           @id @default(uuid())
  CreatedTime        DateTime         @default(now())
  LastOpened         DateTime         @default(now()) // in theory, we could just use flowviews to track this, but this is simpler
  UserEnteredDate    DateTime         @default(now())
  //FK_Tags            FlowTagOnFlow[]
  Type               FlowType
  Title              String           @default("Untitled")
  Trashed            Boolean          @default(false)
  Visibility         Visibility       @default(PUBLIC)
  WasAutomated       Boolean          @default(false)
  Body               String?
  FK_CourseOnTerm    CourseOnTerm?    @relation(fields: [FK_CourseOnTermID], references: [CourseOnTermID], onDelete: SetNull, onUpdate: Cascade)
  FK_CourseOnTermID  Int?
  FK_FlashCardStacks FlashCardStack[]
  FK_Tasks           Task[]
  FK_FlowView        FlowView[]
  // Only use for trash/restore. CourseOnTermID is used for the rest.
  FK_User            User?            @relation(fields: [FK_UserID], references: [UserID], onDelete: SetNull, onUpdate: Cascade)
  FK_UserID          Int?
}

model FlowView {
  FlowViewID  Int      @id @default(autoincrement())
  CreatedTime DateTime @default(now())
  FK_Flow     Flow?    @relation(fields: [FK_FlowID], references: [FlowID], onDelete: SetNull, onUpdate: Cascade)
  FK_FlowID   String?
  FK_User     User?    @relation(fields: [FK_UserID], references: [UserID], onDelete: SetNull, onUpdate: Cascade)
  FK_UserID   Int?
}

//creates many-to-many for tags and flows (flows can be related to many tags, and tags can be related to many flows)
//model FlowTagOnFlow {
//  FlowTagOnFlowID Int      @id @default(autoincrement())
// HOLDER          String? //This is used to avoid updateMany (bug?) error message. Happens in join tables with only id/fks
//  FK_Flow         Flow?    @relation(fields: [FK_FlowID], references: [FlowID], onDelete: Cascade, onUpdate: Cascade)
// FK_FlowID       Int?
// FK_FlowTag      FlowTag? @relation(fields: [FK_FlowTagID], references: [FlowTagID], onDelete: Cascade, onUpdate: Cascade)
//  FK_FlowTagID    Int?
//}

//tags for flows (Homework, Lecture, Recitation)
//model FlowTag {
//  FlowTagID   Int             @id @default(autoincrement())
//  CreatedTime DateTime        @default(now())
//  FK_User     User?           @relation(fields: [FK_UserID], references: [UserID], onDelete: SetNull, onUpdate: Cascade)
// FK_UserID   Int?
// FK_Flows    FlowTagOnFlow[]
//  Public      Boolean         @default(false)
// Name        String
// Term        Term?           @relation(fields: [termTermID], references: [TermID])
// termTermID  Int?
//}

model FlashCardStack {
  FlashCardStackID Int         @id @default(autoincrement())
  CreatedTime      DateTime    @default(now())
  FK_Flow          Flow?       @relation(fields: [FK_FlowID], references: [FlowID], onDelete: SetNull, onUpdate: Cascade)
  FK_FlowID        String?
  FlashCards       FlashCard[]
  Title            String?     @default("Untitled")
}

model FlashCard {
  FlashCardID         Int             @id @default(autoincrement())
  CreatedTime         DateTime        @default(now())
  FK_FlashCardStack   FlashCardStack? @relation(fields: [FK_FlashCardStackID], references: [FlashCardStackID], onDelete: SetNull, onUpdate: Cascade)
  FK_FlashCardStackID Int?
  Position            Int
  Front               String?
  Back                String?
}

model Task {
  TaskID            String        @id @default(uuid())
  CreatedTime       DateTime      @default(now())
  Title             String        @default("Untitled")
  Completed         Boolean       @default(false)
  Description       String?
  DueDate           DateTime?
  Type              TaskType?
  FK_TaskLabel      TaskLabel[]
  FK_User           User?         @relation(fields: [FK_UserID], references: [UserID], onDelete: SetNull, onUpdate: Cascade)
  FK_UserID         Int?
  FK_Flow           Flow?         @relation(fields: [FK_FlowID], references: [FlowID], onDelete: SetNull, onUpdate: Cascade)
  FK_FlowID         String?
  FK_CourseOnTerm   CourseOnTerm? @relation(fields: [FK_CourseOnTermID], references: [CourseOnTermID])
  FK_CourseOnTermID Int?
}

model TaskLabel {
  TaskLabelID Int      @id @default(autoincrement())
  CreatedTime DateTime @default(now())
  Label       String   @default("Untitled")
  FK_Task     Task?    @relation(fields: [FK_TaskID], references: [TaskID])
  FK_TaskID   String?
}
