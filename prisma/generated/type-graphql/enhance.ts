import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

const crudResolversMap = {
  Setting: crudResolvers.SettingCrudResolver,
  AutomationLog: crudResolvers.AutomationLogCrudResolver,
  Friendship: crudResolvers.FriendshipCrudResolver,
  CourseOnTermAutomation: crudResolvers.CourseOnTermAutomationCrudResolver,
  Automation: crudResolvers.AutomationCrudResolver,
  UserOnStudyGroup: crudResolvers.UserOnStudyGroupCrudResolver,
  StudyGroup: crudResolvers.StudyGroupCrudResolver,
  User: crudResolvers.UserCrudResolver,
  Term: crudResolvers.TermCrudResolver,
  Course: crudResolvers.CourseCrudResolver,
  CourseOnTerm: crudResolvers.CourseOnTermCrudResolver,
  School: crudResolvers.SchoolCrudResolver,
  Professor: crudResolvers.ProfessorCrudResolver,
  Flow: crudResolvers.FlowCrudResolver,
  FlowView: crudResolvers.FlowViewCrudResolver,
  FlashcardStack: crudResolvers.FlashcardStackCrudResolver,
  FlashcardStackReview: crudResolvers.FlashcardStackReviewCrudResolver,
  Flashcard: crudResolvers.FlashcardCrudResolver,
  FlashcardReview: crudResolvers.FlashcardReviewCrudResolver,
  Task: crudResolvers.TaskCrudResolver,
  TaskLabel: crudResolvers.TaskLabelCrudResolver,
  Repetition: crudResolvers.RepetitionCrudResolver,
  Blog: crudResolvers.BlogCrudResolver,
  BugReport: crudResolvers.BugReportCrudResolver,
  FeatureRequest: crudResolvers.FeatureRequestCrudResolver
};
const actionResolversMap = {
  Setting: {
    setting: actionResolvers.FindUniqueSettingResolver,
    findFirstSetting: actionResolvers.FindFirstSettingResolver,
    settings: actionResolvers.FindManySettingResolver,
    createSetting: actionResolvers.CreateSettingResolver,
    createManySetting: actionResolvers.CreateManySettingResolver,
    deleteSetting: actionResolvers.DeleteSettingResolver,
    updateSetting: actionResolvers.UpdateSettingResolver,
    deleteManySetting: actionResolvers.DeleteManySettingResolver,
    updateManySetting: actionResolvers.UpdateManySettingResolver,
    upsertSetting: actionResolvers.UpsertSettingResolver,
    aggregateSetting: actionResolvers.AggregateSettingResolver,
    groupBySetting: actionResolvers.GroupBySettingResolver
  },
  AutomationLog: {
    automationLog: actionResolvers.FindUniqueAutomationLogResolver,
    findFirstAutomationLog: actionResolvers.FindFirstAutomationLogResolver,
    automationLogs: actionResolvers.FindManyAutomationLogResolver,
    createAutomationLog: actionResolvers.CreateAutomationLogResolver,
    createManyAutomationLog: actionResolvers.CreateManyAutomationLogResolver,
    deleteAutomationLog: actionResolvers.DeleteAutomationLogResolver,
    updateAutomationLog: actionResolvers.UpdateAutomationLogResolver,
    deleteManyAutomationLog: actionResolvers.DeleteManyAutomationLogResolver,
    updateManyAutomationLog: actionResolvers.UpdateManyAutomationLogResolver,
    upsertAutomationLog: actionResolvers.UpsertAutomationLogResolver,
    aggregateAutomationLog: actionResolvers.AggregateAutomationLogResolver,
    groupByAutomationLog: actionResolvers.GroupByAutomationLogResolver
  },
  Friendship: {
    friendship: actionResolvers.FindUniqueFriendshipResolver,
    findFirstFriendship: actionResolvers.FindFirstFriendshipResolver,
    friendships: actionResolvers.FindManyFriendshipResolver,
    createFriendship: actionResolvers.CreateFriendshipResolver,
    createManyFriendship: actionResolvers.CreateManyFriendshipResolver,
    deleteFriendship: actionResolvers.DeleteFriendshipResolver,
    updateFriendship: actionResolvers.UpdateFriendshipResolver,
    deleteManyFriendship: actionResolvers.DeleteManyFriendshipResolver,
    updateManyFriendship: actionResolvers.UpdateManyFriendshipResolver,
    upsertFriendship: actionResolvers.UpsertFriendshipResolver,
    aggregateFriendship: actionResolvers.AggregateFriendshipResolver,
    groupByFriendship: actionResolvers.GroupByFriendshipResolver
  },
  CourseOnTermAutomation: {
    courseOnTermAutomation: actionResolvers.FindUniqueCourseOnTermAutomationResolver,
    findFirstCourseOnTermAutomation: actionResolvers.FindFirstCourseOnTermAutomationResolver,
    courseOnTermAutomations: actionResolvers.FindManyCourseOnTermAutomationResolver,
    createCourseOnTermAutomation: actionResolvers.CreateCourseOnTermAutomationResolver,
    createManyCourseOnTermAutomation: actionResolvers.CreateManyCourseOnTermAutomationResolver,
    deleteCourseOnTermAutomation: actionResolvers.DeleteCourseOnTermAutomationResolver,
    updateCourseOnTermAutomation: actionResolvers.UpdateCourseOnTermAutomationResolver,
    deleteManyCourseOnTermAutomation: actionResolvers.DeleteManyCourseOnTermAutomationResolver,
    updateManyCourseOnTermAutomation: actionResolvers.UpdateManyCourseOnTermAutomationResolver,
    upsertCourseOnTermAutomation: actionResolvers.UpsertCourseOnTermAutomationResolver,
    aggregateCourseOnTermAutomation: actionResolvers.AggregateCourseOnTermAutomationResolver,
    groupByCourseOnTermAutomation: actionResolvers.GroupByCourseOnTermAutomationResolver
  },
  Automation: {
    automation: actionResolvers.FindUniqueAutomationResolver,
    findFirstAutomation: actionResolvers.FindFirstAutomationResolver,
    automations: actionResolvers.FindManyAutomationResolver,
    createAutomation: actionResolvers.CreateAutomationResolver,
    createManyAutomation: actionResolvers.CreateManyAutomationResolver,
    deleteAutomation: actionResolvers.DeleteAutomationResolver,
    updateAutomation: actionResolvers.UpdateAutomationResolver,
    deleteManyAutomation: actionResolvers.DeleteManyAutomationResolver,
    updateManyAutomation: actionResolvers.UpdateManyAutomationResolver,
    upsertAutomation: actionResolvers.UpsertAutomationResolver,
    aggregateAutomation: actionResolvers.AggregateAutomationResolver,
    groupByAutomation: actionResolvers.GroupByAutomationResolver
  },
  UserOnStudyGroup: {
    userOnStudyGroup: actionResolvers.FindUniqueUserOnStudyGroupResolver,
    findFirstUserOnStudyGroup: actionResolvers.FindFirstUserOnStudyGroupResolver,
    userOnStudyGroups: actionResolvers.FindManyUserOnStudyGroupResolver,
    createUserOnStudyGroup: actionResolvers.CreateUserOnStudyGroupResolver,
    createManyUserOnStudyGroup: actionResolvers.CreateManyUserOnStudyGroupResolver,
    deleteUserOnStudyGroup: actionResolvers.DeleteUserOnStudyGroupResolver,
    updateUserOnStudyGroup: actionResolvers.UpdateUserOnStudyGroupResolver,
    deleteManyUserOnStudyGroup: actionResolvers.DeleteManyUserOnStudyGroupResolver,
    updateManyUserOnStudyGroup: actionResolvers.UpdateManyUserOnStudyGroupResolver,
    upsertUserOnStudyGroup: actionResolvers.UpsertUserOnStudyGroupResolver,
    aggregateUserOnStudyGroup: actionResolvers.AggregateUserOnStudyGroupResolver,
    groupByUserOnStudyGroup: actionResolvers.GroupByUserOnStudyGroupResolver
  },
  StudyGroup: {
    studyGroup: actionResolvers.FindUniqueStudyGroupResolver,
    findFirstStudyGroup: actionResolvers.FindFirstStudyGroupResolver,
    studyGroups: actionResolvers.FindManyStudyGroupResolver,
    createStudyGroup: actionResolvers.CreateStudyGroupResolver,
    createManyStudyGroup: actionResolvers.CreateManyStudyGroupResolver,
    deleteStudyGroup: actionResolvers.DeleteStudyGroupResolver,
    updateStudyGroup: actionResolvers.UpdateStudyGroupResolver,
    deleteManyStudyGroup: actionResolvers.DeleteManyStudyGroupResolver,
    updateManyStudyGroup: actionResolvers.UpdateManyStudyGroupResolver,
    upsertStudyGroup: actionResolvers.UpsertStudyGroupResolver,
    aggregateStudyGroup: actionResolvers.AggregateStudyGroupResolver,
    groupByStudyGroup: actionResolvers.GroupByStudyGroupResolver
  },
  User: {
    user: actionResolvers.FindUniqueUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    users: actionResolvers.FindManyUserResolver,
    createUser: actionResolvers.CreateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    deleteUser: actionResolvers.DeleteUserResolver,
    updateUser: actionResolvers.UpdateUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    upsertUser: actionResolvers.UpsertUserResolver,
    aggregateUser: actionResolvers.AggregateUserResolver,
    groupByUser: actionResolvers.GroupByUserResolver
  },
  Term: {
    term: actionResolvers.FindUniqueTermResolver,
    findFirstTerm: actionResolvers.FindFirstTermResolver,
    terms: actionResolvers.FindManyTermResolver,
    createTerm: actionResolvers.CreateTermResolver,
    createManyTerm: actionResolvers.CreateManyTermResolver,
    deleteTerm: actionResolvers.DeleteTermResolver,
    updateTerm: actionResolvers.UpdateTermResolver,
    deleteManyTerm: actionResolvers.DeleteManyTermResolver,
    updateManyTerm: actionResolvers.UpdateManyTermResolver,
    upsertTerm: actionResolvers.UpsertTermResolver,
    aggregateTerm: actionResolvers.AggregateTermResolver,
    groupByTerm: actionResolvers.GroupByTermResolver
  },
  Course: {
    course: actionResolvers.FindUniqueCourseResolver,
    findFirstCourse: actionResolvers.FindFirstCourseResolver,
    courses: actionResolvers.FindManyCourseResolver,
    createCourse: actionResolvers.CreateCourseResolver,
    createManyCourse: actionResolvers.CreateManyCourseResolver,
    deleteCourse: actionResolvers.DeleteCourseResolver,
    updateCourse: actionResolvers.UpdateCourseResolver,
    deleteManyCourse: actionResolvers.DeleteManyCourseResolver,
    updateManyCourse: actionResolvers.UpdateManyCourseResolver,
    upsertCourse: actionResolvers.UpsertCourseResolver,
    aggregateCourse: actionResolvers.AggregateCourseResolver,
    groupByCourse: actionResolvers.GroupByCourseResolver
  },
  CourseOnTerm: {
    courseOnTerm: actionResolvers.FindUniqueCourseOnTermResolver,
    findFirstCourseOnTerm: actionResolvers.FindFirstCourseOnTermResolver,
    courseOnTerms: actionResolvers.FindManyCourseOnTermResolver,
    createCourseOnTerm: actionResolvers.CreateCourseOnTermResolver,
    createManyCourseOnTerm: actionResolvers.CreateManyCourseOnTermResolver,
    deleteCourseOnTerm: actionResolvers.DeleteCourseOnTermResolver,
    updateCourseOnTerm: actionResolvers.UpdateCourseOnTermResolver,
    deleteManyCourseOnTerm: actionResolvers.DeleteManyCourseOnTermResolver,
    updateManyCourseOnTerm: actionResolvers.UpdateManyCourseOnTermResolver,
    upsertCourseOnTerm: actionResolvers.UpsertCourseOnTermResolver,
    aggregateCourseOnTerm: actionResolvers.AggregateCourseOnTermResolver,
    groupByCourseOnTerm: actionResolvers.GroupByCourseOnTermResolver
  },
  School: {
    school: actionResolvers.FindUniqueSchoolResolver,
    findFirstSchool: actionResolvers.FindFirstSchoolResolver,
    schools: actionResolvers.FindManySchoolResolver,
    createSchool: actionResolvers.CreateSchoolResolver,
    createManySchool: actionResolvers.CreateManySchoolResolver,
    deleteSchool: actionResolvers.DeleteSchoolResolver,
    updateSchool: actionResolvers.UpdateSchoolResolver,
    deleteManySchool: actionResolvers.DeleteManySchoolResolver,
    updateManySchool: actionResolvers.UpdateManySchoolResolver,
    upsertSchool: actionResolvers.UpsertSchoolResolver,
    aggregateSchool: actionResolvers.AggregateSchoolResolver,
    groupBySchool: actionResolvers.GroupBySchoolResolver
  },
  Professor: {
    professor: actionResolvers.FindUniqueProfessorResolver,
    findFirstProfessor: actionResolvers.FindFirstProfessorResolver,
    professors: actionResolvers.FindManyProfessorResolver,
    createProfessor: actionResolvers.CreateProfessorResolver,
    createManyProfessor: actionResolvers.CreateManyProfessorResolver,
    deleteProfessor: actionResolvers.DeleteProfessorResolver,
    updateProfessor: actionResolvers.UpdateProfessorResolver,
    deleteManyProfessor: actionResolvers.DeleteManyProfessorResolver,
    updateManyProfessor: actionResolvers.UpdateManyProfessorResolver,
    upsertProfessor: actionResolvers.UpsertProfessorResolver,
    aggregateProfessor: actionResolvers.AggregateProfessorResolver,
    groupByProfessor: actionResolvers.GroupByProfessorResolver
  },
  Flow: {
    flow: actionResolvers.FindUniqueFlowResolver,
    findFirstFlow: actionResolvers.FindFirstFlowResolver,
    flows: actionResolvers.FindManyFlowResolver,
    createFlow: actionResolvers.CreateFlowResolver,
    createManyFlow: actionResolvers.CreateManyFlowResolver,
    deleteFlow: actionResolvers.DeleteFlowResolver,
    updateFlow: actionResolvers.UpdateFlowResolver,
    deleteManyFlow: actionResolvers.DeleteManyFlowResolver,
    updateManyFlow: actionResolvers.UpdateManyFlowResolver,
    upsertFlow: actionResolvers.UpsertFlowResolver,
    aggregateFlow: actionResolvers.AggregateFlowResolver,
    groupByFlow: actionResolvers.GroupByFlowResolver
  },
  FlowView: {
    flowView: actionResolvers.FindUniqueFlowViewResolver,
    findFirstFlowView: actionResolvers.FindFirstFlowViewResolver,
    flowViews: actionResolvers.FindManyFlowViewResolver,
    createFlowView: actionResolvers.CreateFlowViewResolver,
    createManyFlowView: actionResolvers.CreateManyFlowViewResolver,
    deleteFlowView: actionResolvers.DeleteFlowViewResolver,
    updateFlowView: actionResolvers.UpdateFlowViewResolver,
    deleteManyFlowView: actionResolvers.DeleteManyFlowViewResolver,
    updateManyFlowView: actionResolvers.UpdateManyFlowViewResolver,
    upsertFlowView: actionResolvers.UpsertFlowViewResolver,
    aggregateFlowView: actionResolvers.AggregateFlowViewResolver,
    groupByFlowView: actionResolvers.GroupByFlowViewResolver
  },
  FlashcardStack: {
    flashcardStack: actionResolvers.FindUniqueFlashcardStackResolver,
    findFirstFlashcardStack: actionResolvers.FindFirstFlashcardStackResolver,
    flashcardStacks: actionResolvers.FindManyFlashcardStackResolver,
    createFlashcardStack: actionResolvers.CreateFlashcardStackResolver,
    createManyFlashcardStack: actionResolvers.CreateManyFlashcardStackResolver,
    deleteFlashcardStack: actionResolvers.DeleteFlashcardStackResolver,
    updateFlashcardStack: actionResolvers.UpdateFlashcardStackResolver,
    deleteManyFlashcardStack: actionResolvers.DeleteManyFlashcardStackResolver,
    updateManyFlashcardStack: actionResolvers.UpdateManyFlashcardStackResolver,
    upsertFlashcardStack: actionResolvers.UpsertFlashcardStackResolver,
    aggregateFlashcardStack: actionResolvers.AggregateFlashcardStackResolver,
    groupByFlashcardStack: actionResolvers.GroupByFlashcardStackResolver
  },
  FlashcardStackReview: {
    flashcardStackReview: actionResolvers.FindUniqueFlashcardStackReviewResolver,
    findFirstFlashcardStackReview: actionResolvers.FindFirstFlashcardStackReviewResolver,
    flashcardStackReviews: actionResolvers.FindManyFlashcardStackReviewResolver,
    createFlashcardStackReview: actionResolvers.CreateFlashcardStackReviewResolver,
    createManyFlashcardStackReview: actionResolvers.CreateManyFlashcardStackReviewResolver,
    deleteFlashcardStackReview: actionResolvers.DeleteFlashcardStackReviewResolver,
    updateFlashcardStackReview: actionResolvers.UpdateFlashcardStackReviewResolver,
    deleteManyFlashcardStackReview: actionResolvers.DeleteManyFlashcardStackReviewResolver,
    updateManyFlashcardStackReview: actionResolvers.UpdateManyFlashcardStackReviewResolver,
    upsertFlashcardStackReview: actionResolvers.UpsertFlashcardStackReviewResolver,
    aggregateFlashcardStackReview: actionResolvers.AggregateFlashcardStackReviewResolver,
    groupByFlashcardStackReview: actionResolvers.GroupByFlashcardStackReviewResolver
  },
  Flashcard: {
    flashcard: actionResolvers.FindUniqueFlashcardResolver,
    findFirstFlashcard: actionResolvers.FindFirstFlashcardResolver,
    flashcards: actionResolvers.FindManyFlashcardResolver,
    createFlashcard: actionResolvers.CreateFlashcardResolver,
    createManyFlashcard: actionResolvers.CreateManyFlashcardResolver,
    deleteFlashcard: actionResolvers.DeleteFlashcardResolver,
    updateFlashcard: actionResolvers.UpdateFlashcardResolver,
    deleteManyFlashcard: actionResolvers.DeleteManyFlashcardResolver,
    updateManyFlashcard: actionResolvers.UpdateManyFlashcardResolver,
    upsertFlashcard: actionResolvers.UpsertFlashcardResolver,
    aggregateFlashcard: actionResolvers.AggregateFlashcardResolver,
    groupByFlashcard: actionResolvers.GroupByFlashcardResolver
  },
  FlashcardReview: {
    flashcardReview: actionResolvers.FindUniqueFlashcardReviewResolver,
    findFirstFlashcardReview: actionResolvers.FindFirstFlashcardReviewResolver,
    flashcardReviews: actionResolvers.FindManyFlashcardReviewResolver,
    createFlashcardReview: actionResolvers.CreateFlashcardReviewResolver,
    createManyFlashcardReview: actionResolvers.CreateManyFlashcardReviewResolver,
    deleteFlashcardReview: actionResolvers.DeleteFlashcardReviewResolver,
    updateFlashcardReview: actionResolvers.UpdateFlashcardReviewResolver,
    deleteManyFlashcardReview: actionResolvers.DeleteManyFlashcardReviewResolver,
    updateManyFlashcardReview: actionResolvers.UpdateManyFlashcardReviewResolver,
    upsertFlashcardReview: actionResolvers.UpsertFlashcardReviewResolver,
    aggregateFlashcardReview: actionResolvers.AggregateFlashcardReviewResolver,
    groupByFlashcardReview: actionResolvers.GroupByFlashcardReviewResolver
  },
  Task: {
    task: actionResolvers.FindUniqueTaskResolver,
    findFirstTask: actionResolvers.FindFirstTaskResolver,
    tasks: actionResolvers.FindManyTaskResolver,
    createTask: actionResolvers.CreateTaskResolver,
    createManyTask: actionResolvers.CreateManyTaskResolver,
    deleteTask: actionResolvers.DeleteTaskResolver,
    updateTask: actionResolvers.UpdateTaskResolver,
    deleteManyTask: actionResolvers.DeleteManyTaskResolver,
    updateManyTask: actionResolvers.UpdateManyTaskResolver,
    upsertTask: actionResolvers.UpsertTaskResolver,
    aggregateTask: actionResolvers.AggregateTaskResolver,
    groupByTask: actionResolvers.GroupByTaskResolver
  },
  TaskLabel: {
    taskLabel: actionResolvers.FindUniqueTaskLabelResolver,
    findFirstTaskLabel: actionResolvers.FindFirstTaskLabelResolver,
    taskLabels: actionResolvers.FindManyTaskLabelResolver,
    createTaskLabel: actionResolvers.CreateTaskLabelResolver,
    createManyTaskLabel: actionResolvers.CreateManyTaskLabelResolver,
    deleteTaskLabel: actionResolvers.DeleteTaskLabelResolver,
    updateTaskLabel: actionResolvers.UpdateTaskLabelResolver,
    deleteManyTaskLabel: actionResolvers.DeleteManyTaskLabelResolver,
    updateManyTaskLabel: actionResolvers.UpdateManyTaskLabelResolver,
    upsertTaskLabel: actionResolvers.UpsertTaskLabelResolver,
    aggregateTaskLabel: actionResolvers.AggregateTaskLabelResolver,
    groupByTaskLabel: actionResolvers.GroupByTaskLabelResolver
  },
  Repetition: {
    repetition: actionResolvers.FindUniqueRepetitionResolver,
    findFirstRepetition: actionResolvers.FindFirstRepetitionResolver,
    repetitions: actionResolvers.FindManyRepetitionResolver,
    createRepetition: actionResolvers.CreateRepetitionResolver,
    createManyRepetition: actionResolvers.CreateManyRepetitionResolver,
    deleteRepetition: actionResolvers.DeleteRepetitionResolver,
    updateRepetition: actionResolvers.UpdateRepetitionResolver,
    deleteManyRepetition: actionResolvers.DeleteManyRepetitionResolver,
    updateManyRepetition: actionResolvers.UpdateManyRepetitionResolver,
    upsertRepetition: actionResolvers.UpsertRepetitionResolver,
    aggregateRepetition: actionResolvers.AggregateRepetitionResolver,
    groupByRepetition: actionResolvers.GroupByRepetitionResolver
  },
  Blog: {
    blog: actionResolvers.FindUniqueBlogResolver,
    findFirstBlog: actionResolvers.FindFirstBlogResolver,
    blogs: actionResolvers.FindManyBlogResolver,
    createBlog: actionResolvers.CreateBlogResolver,
    createManyBlog: actionResolvers.CreateManyBlogResolver,
    deleteBlog: actionResolvers.DeleteBlogResolver,
    updateBlog: actionResolvers.UpdateBlogResolver,
    deleteManyBlog: actionResolvers.DeleteManyBlogResolver,
    updateManyBlog: actionResolvers.UpdateManyBlogResolver,
    upsertBlog: actionResolvers.UpsertBlogResolver,
    aggregateBlog: actionResolvers.AggregateBlogResolver,
    groupByBlog: actionResolvers.GroupByBlogResolver
  },
  BugReport: {
    bugReport: actionResolvers.FindUniqueBugReportResolver,
    findFirstBugReport: actionResolvers.FindFirstBugReportResolver,
    bugReports: actionResolvers.FindManyBugReportResolver,
    createBugReport: actionResolvers.CreateBugReportResolver,
    createManyBugReport: actionResolvers.CreateManyBugReportResolver,
    deleteBugReport: actionResolvers.DeleteBugReportResolver,
    updateBugReport: actionResolvers.UpdateBugReportResolver,
    deleteManyBugReport: actionResolvers.DeleteManyBugReportResolver,
    updateManyBugReport: actionResolvers.UpdateManyBugReportResolver,
    upsertBugReport: actionResolvers.UpsertBugReportResolver,
    aggregateBugReport: actionResolvers.AggregateBugReportResolver,
    groupByBugReport: actionResolvers.GroupByBugReportResolver
  },
  FeatureRequest: {
    featureRequest: actionResolvers.FindUniqueFeatureRequestResolver,
    findFirstFeatureRequest: actionResolvers.FindFirstFeatureRequestResolver,
    featureRequests: actionResolvers.FindManyFeatureRequestResolver,
    createFeatureRequest: actionResolvers.CreateFeatureRequestResolver,
    createManyFeatureRequest: actionResolvers.CreateManyFeatureRequestResolver,
    deleteFeatureRequest: actionResolvers.DeleteFeatureRequestResolver,
    updateFeatureRequest: actionResolvers.UpdateFeatureRequestResolver,
    deleteManyFeatureRequest: actionResolvers.DeleteManyFeatureRequestResolver,
    updateManyFeatureRequest: actionResolvers.UpdateManyFeatureRequestResolver,
    upsertFeatureRequest: actionResolvers.UpsertFeatureRequestResolver,
    aggregateFeatureRequest: actionResolvers.AggregateFeatureRequestResolver,
    groupByFeatureRequest: actionResolvers.GroupByFeatureRequestResolver
  }
};
const crudResolversInfo = {
  Setting: ["setting", "findFirstSetting", "settings", "createSetting", "createManySetting", "deleteSetting", "updateSetting", "deleteManySetting", "updateManySetting", "upsertSetting", "aggregateSetting", "groupBySetting"],
  AutomationLog: ["automationLog", "findFirstAutomationLog", "automationLogs", "createAutomationLog", "createManyAutomationLog", "deleteAutomationLog", "updateAutomationLog", "deleteManyAutomationLog", "updateManyAutomationLog", "upsertAutomationLog", "aggregateAutomationLog", "groupByAutomationLog"],
  Friendship: ["friendship", "findFirstFriendship", "friendships", "createFriendship", "createManyFriendship", "deleteFriendship", "updateFriendship", "deleteManyFriendship", "updateManyFriendship", "upsertFriendship", "aggregateFriendship", "groupByFriendship"],
  CourseOnTermAutomation: ["courseOnTermAutomation", "findFirstCourseOnTermAutomation", "courseOnTermAutomations", "createCourseOnTermAutomation", "createManyCourseOnTermAutomation", "deleteCourseOnTermAutomation", "updateCourseOnTermAutomation", "deleteManyCourseOnTermAutomation", "updateManyCourseOnTermAutomation", "upsertCourseOnTermAutomation", "aggregateCourseOnTermAutomation", "groupByCourseOnTermAutomation"],
  Automation: ["automation", "findFirstAutomation", "automations", "createAutomation", "createManyAutomation", "deleteAutomation", "updateAutomation", "deleteManyAutomation", "updateManyAutomation", "upsertAutomation", "aggregateAutomation", "groupByAutomation"],
  UserOnStudyGroup: ["userOnStudyGroup", "findFirstUserOnStudyGroup", "userOnStudyGroups", "createUserOnStudyGroup", "createManyUserOnStudyGroup", "deleteUserOnStudyGroup", "updateUserOnStudyGroup", "deleteManyUserOnStudyGroup", "updateManyUserOnStudyGroup", "upsertUserOnStudyGroup", "aggregateUserOnStudyGroup", "groupByUserOnStudyGroup"],
  StudyGroup: ["studyGroup", "findFirstStudyGroup", "studyGroups", "createStudyGroup", "createManyStudyGroup", "deleteStudyGroup", "updateStudyGroup", "deleteManyStudyGroup", "updateManyStudyGroup", "upsertStudyGroup", "aggregateStudyGroup", "groupByStudyGroup"],
  User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
  Term: ["term", "findFirstTerm", "terms", "createTerm", "createManyTerm", "deleteTerm", "updateTerm", "deleteManyTerm", "updateManyTerm", "upsertTerm", "aggregateTerm", "groupByTerm"],
  Course: ["course", "findFirstCourse", "courses", "createCourse", "createManyCourse", "deleteCourse", "updateCourse", "deleteManyCourse", "updateManyCourse", "upsertCourse", "aggregateCourse", "groupByCourse"],
  CourseOnTerm: ["courseOnTerm", "findFirstCourseOnTerm", "courseOnTerms", "createCourseOnTerm", "createManyCourseOnTerm", "deleteCourseOnTerm", "updateCourseOnTerm", "deleteManyCourseOnTerm", "updateManyCourseOnTerm", "upsertCourseOnTerm", "aggregateCourseOnTerm", "groupByCourseOnTerm"],
  School: ["school", "findFirstSchool", "schools", "createSchool", "createManySchool", "deleteSchool", "updateSchool", "deleteManySchool", "updateManySchool", "upsertSchool", "aggregateSchool", "groupBySchool"],
  Professor: ["professor", "findFirstProfessor", "professors", "createProfessor", "createManyProfessor", "deleteProfessor", "updateProfessor", "deleteManyProfessor", "updateManyProfessor", "upsertProfessor", "aggregateProfessor", "groupByProfessor"],
  Flow: ["flow", "findFirstFlow", "flows", "createFlow", "createManyFlow", "deleteFlow", "updateFlow", "deleteManyFlow", "updateManyFlow", "upsertFlow", "aggregateFlow", "groupByFlow"],
  FlowView: ["flowView", "findFirstFlowView", "flowViews", "createFlowView", "createManyFlowView", "deleteFlowView", "updateFlowView", "deleteManyFlowView", "updateManyFlowView", "upsertFlowView", "aggregateFlowView", "groupByFlowView"],
  FlashcardStack: ["flashcardStack", "findFirstFlashcardStack", "flashcardStacks", "createFlashcardStack", "createManyFlashcardStack", "deleteFlashcardStack", "updateFlashcardStack", "deleteManyFlashcardStack", "updateManyFlashcardStack", "upsertFlashcardStack", "aggregateFlashcardStack", "groupByFlashcardStack"],
  FlashcardStackReview: ["flashcardStackReview", "findFirstFlashcardStackReview", "flashcardStackReviews", "createFlashcardStackReview", "createManyFlashcardStackReview", "deleteFlashcardStackReview", "updateFlashcardStackReview", "deleteManyFlashcardStackReview", "updateManyFlashcardStackReview", "upsertFlashcardStackReview", "aggregateFlashcardStackReview", "groupByFlashcardStackReview"],
  Flashcard: ["flashcard", "findFirstFlashcard", "flashcards", "createFlashcard", "createManyFlashcard", "deleteFlashcard", "updateFlashcard", "deleteManyFlashcard", "updateManyFlashcard", "upsertFlashcard", "aggregateFlashcard", "groupByFlashcard"],
  FlashcardReview: ["flashcardReview", "findFirstFlashcardReview", "flashcardReviews", "createFlashcardReview", "createManyFlashcardReview", "deleteFlashcardReview", "updateFlashcardReview", "deleteManyFlashcardReview", "updateManyFlashcardReview", "upsertFlashcardReview", "aggregateFlashcardReview", "groupByFlashcardReview"],
  Task: ["task", "findFirstTask", "tasks", "createTask", "createManyTask", "deleteTask", "updateTask", "deleteManyTask", "updateManyTask", "upsertTask", "aggregateTask", "groupByTask"],
  TaskLabel: ["taskLabel", "findFirstTaskLabel", "taskLabels", "createTaskLabel", "createManyTaskLabel", "deleteTaskLabel", "updateTaskLabel", "deleteManyTaskLabel", "updateManyTaskLabel", "upsertTaskLabel", "aggregateTaskLabel", "groupByTaskLabel"],
  Repetition: ["repetition", "findFirstRepetition", "repetitions", "createRepetition", "createManyRepetition", "deleteRepetition", "updateRepetition", "deleteManyRepetition", "updateManyRepetition", "upsertRepetition", "aggregateRepetition", "groupByRepetition"],
  Blog: ["blog", "findFirstBlog", "blogs", "createBlog", "createManyBlog", "deleteBlog", "updateBlog", "deleteManyBlog", "updateManyBlog", "upsertBlog", "aggregateBlog", "groupByBlog"],
  BugReport: ["bugReport", "findFirstBugReport", "bugReports", "createBugReport", "createManyBugReport", "deleteBugReport", "updateBugReport", "deleteManyBugReport", "updateManyBugReport", "upsertBugReport", "aggregateBugReport", "groupByBugReport"],
  FeatureRequest: ["featureRequest", "findFirstFeatureRequest", "featureRequests", "createFeatureRequest", "createManyFeatureRequest", "deleteFeatureRequest", "updateFeatureRequest", "deleteManyFeatureRequest", "updateManyFeatureRequest", "upsertFeatureRequest", "aggregateFeatureRequest", "groupByFeatureRequest"]
};
const argsInfo = {
  FindUniqueSettingArgs: ["where"],
  FindFirstSettingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySettingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSettingArgs: ["data"],
  CreateManySettingArgs: ["data", "skipDuplicates"],
  DeleteSettingArgs: ["where"],
  UpdateSettingArgs: ["data", "where"],
  DeleteManySettingArgs: ["where"],
  UpdateManySettingArgs: ["data", "where"],
  UpsertSettingArgs: ["where", "create", "update"],
  AggregateSettingArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySettingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAutomationLogArgs: ["where"],
  FindFirstAutomationLogArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAutomationLogArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAutomationLogArgs: ["data"],
  CreateManyAutomationLogArgs: ["data", "skipDuplicates"],
  DeleteAutomationLogArgs: ["where"],
  UpdateAutomationLogArgs: ["data", "where"],
  DeleteManyAutomationLogArgs: ["where"],
  UpdateManyAutomationLogArgs: ["data", "where"],
  UpsertAutomationLogArgs: ["where", "create", "update"],
  AggregateAutomationLogArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAutomationLogArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFriendshipArgs: ["where"],
  FindFirstFriendshipArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFriendshipArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFriendshipArgs: ["data"],
  CreateManyFriendshipArgs: ["data", "skipDuplicates"],
  DeleteFriendshipArgs: ["where"],
  UpdateFriendshipArgs: ["data", "where"],
  DeleteManyFriendshipArgs: ["where"],
  UpdateManyFriendshipArgs: ["data", "where"],
  UpsertFriendshipArgs: ["where", "create", "update"],
  AggregateFriendshipArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFriendshipArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCourseOnTermAutomationArgs: ["where"],
  FindFirstCourseOnTermAutomationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCourseOnTermAutomationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCourseOnTermAutomationArgs: ["data"],
  CreateManyCourseOnTermAutomationArgs: ["data", "skipDuplicates"],
  DeleteCourseOnTermAutomationArgs: ["where"],
  UpdateCourseOnTermAutomationArgs: ["data", "where"],
  DeleteManyCourseOnTermAutomationArgs: ["where"],
  UpdateManyCourseOnTermAutomationArgs: ["data", "where"],
  UpsertCourseOnTermAutomationArgs: ["where", "create", "update"],
  AggregateCourseOnTermAutomationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCourseOnTermAutomationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAutomationArgs: ["where"],
  FindFirstAutomationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAutomationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAutomationArgs: ["data"],
  CreateManyAutomationArgs: ["data", "skipDuplicates"],
  DeleteAutomationArgs: ["where"],
  UpdateAutomationArgs: ["data", "where"],
  DeleteManyAutomationArgs: ["where"],
  UpdateManyAutomationArgs: ["data", "where"],
  UpsertAutomationArgs: ["where", "create", "update"],
  AggregateAutomationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAutomationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueUserOnStudyGroupArgs: ["where"],
  FindFirstUserOnStudyGroupArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserOnStudyGroupArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserOnStudyGroupArgs: ["data"],
  CreateManyUserOnStudyGroupArgs: ["data", "skipDuplicates"],
  DeleteUserOnStudyGroupArgs: ["where"],
  UpdateUserOnStudyGroupArgs: ["data", "where"],
  DeleteManyUserOnStudyGroupArgs: ["where"],
  UpdateManyUserOnStudyGroupArgs: ["data", "where"],
  UpsertUserOnStudyGroupArgs: ["where", "create", "update"],
  AggregateUserOnStudyGroupArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserOnStudyGroupArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueStudyGroupArgs: ["where"],
  FindFirstStudyGroupArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyStudyGroupArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateStudyGroupArgs: ["data"],
  CreateManyStudyGroupArgs: ["data", "skipDuplicates"],
  DeleteStudyGroupArgs: ["where"],
  UpdateStudyGroupArgs: ["data", "where"],
  DeleteManyStudyGroupArgs: ["where"],
  UpdateManyStudyGroupArgs: ["data", "where"],
  UpsertStudyGroupArgs: ["where", "create", "update"],
  AggregateStudyGroupArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByStudyGroupArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserArgs: ["data"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  DeleteUserArgs: ["where"],
  UpdateUserArgs: ["data", "where"],
  DeleteManyUserArgs: ["where"],
  UpdateManyUserArgs: ["data", "where"],
  UpsertUserArgs: ["where", "create", "update"],
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTermArgs: ["where"],
  FindFirstTermArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTermArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTermArgs: ["data"],
  CreateManyTermArgs: ["data", "skipDuplicates"],
  DeleteTermArgs: ["where"],
  UpdateTermArgs: ["data", "where"],
  DeleteManyTermArgs: ["where"],
  UpdateManyTermArgs: ["data", "where"],
  UpsertTermArgs: ["where", "create", "update"],
  AggregateTermArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTermArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCourseArgs: ["where"],
  FindFirstCourseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCourseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCourseArgs: ["data"],
  CreateManyCourseArgs: ["data", "skipDuplicates"],
  DeleteCourseArgs: ["where"],
  UpdateCourseArgs: ["data", "where"],
  DeleteManyCourseArgs: ["where"],
  UpdateManyCourseArgs: ["data", "where"],
  UpsertCourseArgs: ["where", "create", "update"],
  AggregateCourseArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCourseArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCourseOnTermArgs: ["where"],
  FindFirstCourseOnTermArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCourseOnTermArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCourseOnTermArgs: ["data"],
  CreateManyCourseOnTermArgs: ["data", "skipDuplicates"],
  DeleteCourseOnTermArgs: ["where"],
  UpdateCourseOnTermArgs: ["data", "where"],
  DeleteManyCourseOnTermArgs: ["where"],
  UpdateManyCourseOnTermArgs: ["data", "where"],
  UpsertCourseOnTermArgs: ["where", "create", "update"],
  AggregateCourseOnTermArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCourseOnTermArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSchoolArgs: ["where"],
  FindFirstSchoolArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySchoolArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSchoolArgs: ["data"],
  CreateManySchoolArgs: ["data", "skipDuplicates"],
  DeleteSchoolArgs: ["where"],
  UpdateSchoolArgs: ["data", "where"],
  DeleteManySchoolArgs: ["where"],
  UpdateManySchoolArgs: ["data", "where"],
  UpsertSchoolArgs: ["where", "create", "update"],
  AggregateSchoolArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySchoolArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProfessorArgs: ["where"],
  FindFirstProfessorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyProfessorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateProfessorArgs: ["data"],
  CreateManyProfessorArgs: ["data", "skipDuplicates"],
  DeleteProfessorArgs: ["where"],
  UpdateProfessorArgs: ["data", "where"],
  DeleteManyProfessorArgs: ["where"],
  UpdateManyProfessorArgs: ["data", "where"],
  UpsertProfessorArgs: ["where", "create", "update"],
  AggregateProfessorArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProfessorArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFlowArgs: ["where"],
  FindFirstFlowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFlowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFlowArgs: ["data"],
  CreateManyFlowArgs: ["data", "skipDuplicates"],
  DeleteFlowArgs: ["where"],
  UpdateFlowArgs: ["data", "where"],
  DeleteManyFlowArgs: ["where"],
  UpdateManyFlowArgs: ["data", "where"],
  UpsertFlowArgs: ["where", "create", "update"],
  AggregateFlowArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFlowArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFlowViewArgs: ["where"],
  FindFirstFlowViewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFlowViewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFlowViewArgs: ["data"],
  CreateManyFlowViewArgs: ["data", "skipDuplicates"],
  DeleteFlowViewArgs: ["where"],
  UpdateFlowViewArgs: ["data", "where"],
  DeleteManyFlowViewArgs: ["where"],
  UpdateManyFlowViewArgs: ["data", "where"],
  UpsertFlowViewArgs: ["where", "create", "update"],
  AggregateFlowViewArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFlowViewArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFlashcardStackArgs: ["where"],
  FindFirstFlashcardStackArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFlashcardStackArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFlashcardStackArgs: ["data"],
  CreateManyFlashcardStackArgs: ["data", "skipDuplicates"],
  DeleteFlashcardStackArgs: ["where"],
  UpdateFlashcardStackArgs: ["data", "where"],
  DeleteManyFlashcardStackArgs: ["where"],
  UpdateManyFlashcardStackArgs: ["data", "where"],
  UpsertFlashcardStackArgs: ["where", "create", "update"],
  AggregateFlashcardStackArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFlashcardStackArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFlashcardStackReviewArgs: ["where"],
  FindFirstFlashcardStackReviewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFlashcardStackReviewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFlashcardStackReviewArgs: ["data"],
  CreateManyFlashcardStackReviewArgs: ["data", "skipDuplicates"],
  DeleteFlashcardStackReviewArgs: ["where"],
  UpdateFlashcardStackReviewArgs: ["data", "where"],
  DeleteManyFlashcardStackReviewArgs: ["where"],
  UpdateManyFlashcardStackReviewArgs: ["data", "where"],
  UpsertFlashcardStackReviewArgs: ["where", "create", "update"],
  AggregateFlashcardStackReviewArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFlashcardStackReviewArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFlashcardArgs: ["where"],
  FindFirstFlashcardArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFlashcardArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFlashcardArgs: ["data"],
  CreateManyFlashcardArgs: ["data", "skipDuplicates"],
  DeleteFlashcardArgs: ["where"],
  UpdateFlashcardArgs: ["data", "where"],
  DeleteManyFlashcardArgs: ["where"],
  UpdateManyFlashcardArgs: ["data", "where"],
  UpsertFlashcardArgs: ["where", "create", "update"],
  AggregateFlashcardArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFlashcardArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFlashcardReviewArgs: ["where"],
  FindFirstFlashcardReviewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFlashcardReviewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFlashcardReviewArgs: ["data"],
  CreateManyFlashcardReviewArgs: ["data", "skipDuplicates"],
  DeleteFlashcardReviewArgs: ["where"],
  UpdateFlashcardReviewArgs: ["data", "where"],
  DeleteManyFlashcardReviewArgs: ["where"],
  UpdateManyFlashcardReviewArgs: ["data", "where"],
  UpsertFlashcardReviewArgs: ["where", "create", "update"],
  AggregateFlashcardReviewArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFlashcardReviewArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTaskArgs: ["where"],
  FindFirstTaskArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTaskArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTaskArgs: ["data"],
  CreateManyTaskArgs: ["data", "skipDuplicates"],
  DeleteTaskArgs: ["where"],
  UpdateTaskArgs: ["data", "where"],
  DeleteManyTaskArgs: ["where"],
  UpdateManyTaskArgs: ["data", "where"],
  UpsertTaskArgs: ["where", "create", "update"],
  AggregateTaskArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTaskArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTaskLabelArgs: ["where"],
  FindFirstTaskLabelArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTaskLabelArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTaskLabelArgs: ["data"],
  CreateManyTaskLabelArgs: ["data", "skipDuplicates"],
  DeleteTaskLabelArgs: ["where"],
  UpdateTaskLabelArgs: ["data", "where"],
  DeleteManyTaskLabelArgs: ["where"],
  UpdateManyTaskLabelArgs: ["data", "where"],
  UpsertTaskLabelArgs: ["where", "create", "update"],
  AggregateTaskLabelArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTaskLabelArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueRepetitionArgs: ["where"],
  FindFirstRepetitionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyRepetitionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateRepetitionArgs: ["data"],
  CreateManyRepetitionArgs: ["data", "skipDuplicates"],
  DeleteRepetitionArgs: ["where"],
  UpdateRepetitionArgs: ["data", "where"],
  DeleteManyRepetitionArgs: ["where"],
  UpdateManyRepetitionArgs: ["data", "where"],
  UpsertRepetitionArgs: ["where", "create", "update"],
  AggregateRepetitionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByRepetitionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBlogArgs: ["where"],
  FindFirstBlogArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyBlogArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateBlogArgs: ["data"],
  CreateManyBlogArgs: ["data", "skipDuplicates"],
  DeleteBlogArgs: ["where"],
  UpdateBlogArgs: ["data", "where"],
  DeleteManyBlogArgs: ["where"],
  UpdateManyBlogArgs: ["data", "where"],
  UpsertBlogArgs: ["where", "create", "update"],
  AggregateBlogArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBlogArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBugReportArgs: ["where"],
  FindFirstBugReportArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyBugReportArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateBugReportArgs: ["data"],
  CreateManyBugReportArgs: ["data", "skipDuplicates"],
  DeleteBugReportArgs: ["where"],
  UpdateBugReportArgs: ["data", "where"],
  DeleteManyBugReportArgs: ["where"],
  UpdateManyBugReportArgs: ["data", "where"],
  UpsertBugReportArgs: ["where", "create", "update"],
  AggregateBugReportArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBugReportArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFeatureRequestArgs: ["where"],
  FindFirstFeatureRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFeatureRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFeatureRequestArgs: ["data"],
  CreateManyFeatureRequestArgs: ["data", "skipDuplicates"],
  DeleteFeatureRequestArgs: ["where"],
  UpdateFeatureRequestArgs: ["data", "where"],
  DeleteManyFeatureRequestArgs: ["where"],
  UpdateManyFeatureRequestArgs: ["data", "where"],
  UpsertFeatureRequestArgs: ["where", "create", "update"],
  AggregateFeatureRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFeatureRequestArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<
  TModel extends ResolverModelNames
  > = keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<
  TModel extends ResolverModelNames
  > = Partial<Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames = crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function).prototype;
        tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
        tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (actionResolversConfig[
        resolverActionName as keyof typeof actionResolversConfig
      ] as Function).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<
  TArgsType extends ArgsTypesNames
  > = FieldsConfig<ArgFieldNames<TArgsType>>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName = argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  Setting: relationResolvers.SettingRelationsResolver,
  AutomationLog: relationResolvers.AutomationLogRelationsResolver,
  Friendship: relationResolvers.FriendshipRelationsResolver,
  CourseOnTermAutomation: relationResolvers.CourseOnTermAutomationRelationsResolver,
  Automation: relationResolvers.AutomationRelationsResolver,
  UserOnStudyGroup: relationResolvers.UserOnStudyGroupRelationsResolver,
  StudyGroup: relationResolvers.StudyGroupRelationsResolver,
  User: relationResolvers.UserRelationsResolver,
  Term: relationResolvers.TermRelationsResolver,
  Course: relationResolvers.CourseRelationsResolver,
  CourseOnTerm: relationResolvers.CourseOnTermRelationsResolver,
  School: relationResolvers.SchoolRelationsResolver,
  Professor: relationResolvers.ProfessorRelationsResolver,
  Flow: relationResolvers.FlowRelationsResolver,
  FlowView: relationResolvers.FlowViewRelationsResolver,
  FlashcardStack: relationResolvers.FlashcardStackRelationsResolver,
  FlashcardStackReview: relationResolvers.FlashcardStackReviewRelationsResolver,
  Flashcard: relationResolvers.FlashcardRelationsResolver,
  FlashcardReview: relationResolvers.FlashcardReviewRelationsResolver,
  Task: relationResolvers.TaskRelationsResolver,
  TaskLabel: relationResolvers.TaskLabelRelationsResolver,
  Repetition: relationResolvers.RepetitionRelationsResolver,
  Blog: relationResolvers.BlogRelationsResolver,
  BugReport: relationResolvers.BugReportRelationsResolver,
  FeatureRequest: relationResolvers.FeatureRequestRelationsResolver
};
const relationResolversInfo = {
  Setting: ["FK_User"],
  AutomationLog: ["FK_CourseOnTermAutomation"],
  Friendship: ["FK_UserFrom", "FK_UserTo"],
  CourseOnTermAutomation: ["AutomationLog", "FK_Automation", "FK_CourseOnTerm"],
  Automation: ["CourseOnTermAutomations", "FK_User"],
  UserOnStudyGroup: ["FK_User", "FK_StudyGroup"],
  StudyGroup: ["FK_User", "FK_UserOnStudyGroup"],
  User: ["FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  Term: ["FK_User", "FK_School", "FK_CourseOnTerm"],
  Course: ["FK_School", "FK_Professor", "CourseOnTerm"],
  CourseOnTerm: ["FK_Course", "FK_Term", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  School: ["FK_Course", "FK_User", "FK_Professor", "Term"],
  Professor: ["FK_Courses", "FK_School"],
  Flow: ["FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User", "FK_Repetition"],
  FlowView: ["FK_Flow", "FK_User"],
  FlashcardStack: ["FK_Flow", "FK_Flashcards", "FK_FlashcardStackReviews", "FK_Repetition"],
  FlashcardStackReview: ["FK_FlashcardStack", "FK_FlashcardReviews"],
  Flashcard: ["FK_FlashcardStack", "FK_FlashcardReviews"],
  FlashcardReview: ["FK_Flashcard", "FK_FlashcardStackReview"],
  Task: ["FK_TaskLabel", "FK_User", "FK_Flow", "FK_CourseOnTerm", "FK_Repetition"],
  TaskLabel: ["FK_Task"],
  Repetition: ["FK_Flow", "FK_FlashcardStack", "FK_Tasks"],
  Blog: ["FK_User"],
  BugReport: ["FK_User"],
  FeatureRequest: ["FK_User"]
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<
  TModel extends RelationResolverModelNames
  > = keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<TModel extends RelationResolverModelNames>
  = Partial<Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
    const modelName = relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig = relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames = relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
      }
    }
    const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | "_all", PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(
      it => it !== "_all"
    );
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  Setting: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID"],
  AutomationLog: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  Friendship: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  CourseOnTermAutomation: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  Automation: ["AutomationID", "RefreshToken", "FK_UserID"],
  UserOnStudyGroup: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  StudyGroup: ["StudyGroupID", "Name", "FK_UserID"],
  User: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  Term: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  Course: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  CourseOnTerm: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  School: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType"],
  Professor: ["ProfessorID", "FK_SchoolID", "Name", "Email"],
  Flow: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  FlowView: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlashcardStack: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  FlashcardStackReview: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  Flashcard: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardReview: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  Task: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  TaskLabel: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  Repetition: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID"],
  Blog: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BugReport: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  FeatureRequest: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"]
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateSetting: ["_count", "_avg", "_sum", "_min", "_max"],
  SettingGroupBy: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAutomationLog: ["_count", "_avg", "_sum", "_min", "_max"],
  AutomationLogGroupBy: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFriendship: ["_count", "_avg", "_sum", "_min", "_max"],
  FriendshipGroupBy: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCourseOnTermAutomation: ["_count", "_avg", "_sum", "_min", "_max"],
  CourseOnTermAutomationGroupBy: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAutomation: ["_count", "_avg", "_sum", "_min", "_max"],
  AutomationGroupBy: ["AutomationID", "RefreshToken", "FK_UserID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateUserOnStudyGroup: ["_count", "_avg", "_sum", "_min", "_max"],
  UserOnStudyGroupGroupBy: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateStudyGroup: ["_count", "_avg", "_sum", "_min", "_max"],
  StudyGroupGroupBy: ["StudyGroupID", "Name", "FK_UserID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
  UserGroupBy: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTerm: ["_count", "_avg", "_sum", "_min", "_max"],
  TermGroupBy: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCourse: ["_count", "_avg", "_sum", "_min", "_max"],
  CourseGroupBy: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCourseOnTerm: ["_count", "_avg", "_sum", "_min", "_max"],
  CourseOnTermGroupBy: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateSchool: ["_count", "_avg", "_sum", "_min", "_max"],
  SchoolGroupBy: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateProfessor: ["_count", "_avg", "_sum", "_min", "_max"],
  ProfessorGroupBy: ["ProfessorID", "FK_SchoolID", "Name", "Email", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFlow: ["_count", "_avg", "_sum", "_min", "_max"],
  FlowGroupBy: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFlowView: ["_count", "_avg", "_sum", "_min", "_max"],
  FlowViewGroupBy: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFlashcardStack: ["_count", "_min", "_max"],
  FlashcardStackGroupBy: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description", "_count", "_min", "_max"],
  AggregateFlashcardStackReview: ["_count", "_min", "_max"],
  FlashcardStackReviewGroupBy: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID", "_count", "_min", "_max"],
  AggregateFlashcard: ["_count", "_avg", "_sum", "_min", "_max"],
  FlashcardGroupBy: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFlashcardReview: ["_count", "_min", "_max"],
  FlashcardReviewGroupBy: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID", "_count", "_min", "_max"],
  AggregateTask: ["_count", "_avg", "_sum", "_min", "_max"],
  TaskGroupBy: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTaskLabel: ["_count", "_avg", "_sum", "_min", "_max"],
  TaskLabelGroupBy: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateRepetition: ["_count", "_min", "_max"],
  RepetitionGroupBy: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID", "_count", "_min", "_max"],
  AggregateBlog: ["_count", "_avg", "_sum", "_min", "_max"],
  BlogGroupBy: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateBugReport: ["_count", "_avg", "_sum", "_min", "_max"],
  BugReportGroupBy: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFeatureRequest: ["_count", "_avg", "_sum", "_min", "_max"],
  FeatureRequestGroupBy: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body", "_count", "_avg", "_sum", "_min", "_max"],
  AffectedRowsOutput: ["count"],
  SettingCountAggregate: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID", "_all"],
  SettingAvgAggregate: ["SettingID", "FK_UserID"],
  SettingSumAggregate: ["SettingID", "FK_UserID"],
  SettingMinAggregate: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID"],
  SettingMaxAggregate: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID"],
  AutomationLogCountAggregate: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID", "_all"],
  AutomationLogAvgAggregate: ["AutomationLogID", "FK_CourseOnTermAutomationID"],
  AutomationLogSumAggregate: ["AutomationLogID", "FK_CourseOnTermAutomationID"],
  AutomationLogMinAggregate: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  AutomationLogMaxAggregate: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  FriendshipCountAggregate: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID", "_all"],
  FriendshipAvgAggregate: ["FK_UserFromID", "FK_UserToID"],
  FriendshipSumAggregate: ["FK_UserFromID", "FK_UserToID"],
  FriendshipMinAggregate: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  FriendshipMaxAggregate: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  CourseOnTermAutomationCount: ["AutomationLog"],
  CourseOnTermAutomationCountAggregate: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID", "_all"],
  CourseOnTermAutomationAvgAggregate: ["CourseOnTermAutomationID", "FK_AutomationID", "FK_CourseOnTermID"],
  CourseOnTermAutomationSumAggregate: ["CourseOnTermAutomationID", "FK_AutomationID", "FK_CourseOnTermID"],
  CourseOnTermAutomationMinAggregate: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  CourseOnTermAutomationMaxAggregate: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  AutomationCount: ["CourseOnTermAutomations"],
  AutomationCountAggregate: ["AutomationID", "RefreshToken", "FK_UserID", "_all"],
  AutomationAvgAggregate: ["AutomationID", "FK_UserID"],
  AutomationSumAggregate: ["AutomationID", "FK_UserID"],
  AutomationMinAggregate: ["AutomationID", "RefreshToken", "FK_UserID"],
  AutomationMaxAggregate: ["AutomationID", "RefreshToken", "FK_UserID"],
  UserOnStudyGroupCountAggregate: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID", "_all"],
  UserOnStudyGroupAvgAggregate: ["UserOnStudyGroupID", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupSumAggregate: ["UserOnStudyGroupID", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupMinAggregate: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupMaxAggregate: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  StudyGroupCount: ["FK_UserOnStudyGroup"],
  StudyGroupCountAggregate: ["StudyGroupID", "Name", "FK_UserID", "_all"],
  StudyGroupAvgAggregate: ["StudyGroupID", "FK_UserID"],
  StudyGroupSumAggregate: ["StudyGroupID", "FK_UserID"],
  StudyGroupMinAggregate: ["StudyGroupID", "Name", "FK_UserID"],
  StudyGroupMaxAggregate: ["StudyGroupID", "Name", "FK_UserID"],
  UserCount: ["FK_Terms", "FK_Task", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCountAggregate: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID", "_all"],
  UserAvgAggregate: ["UserID", "FK_SchoolID"],
  UserSumAggregate: ["UserID", "FK_SchoolID"],
  UserMinAggregate: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  UserMaxAggregate: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  TermCount: ["FK_CourseOnTerm"],
  TermCountAggregate: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID", "_all"],
  TermAvgAggregate: ["TermID", "FK_UserID", "FK_SchoolID"],
  TermSumAggregate: ["TermID", "FK_UserID", "FK_SchoolID"],
  TermMinAggregate: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  TermMaxAggregate: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  CourseCount: ["CourseOnTerm"],
  CourseCountAggregate: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID", "_all"],
  CourseAvgAggregate: ["CourseID", "FK_SchoolID", "FK_ProfessorID"],
  CourseSumAggregate: ["CourseID", "FK_SchoolID", "FK_ProfessorID"],
  CourseMinAggregate: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  CourseMaxAggregate: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  CourseOnTermCount: ["FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermCountAggregate: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID", "_all"],
  CourseOnTermAvgAggregate: ["CourseOnTermID", "Index", "FK_CourseID", "FK_TermID"],
  CourseOnTermSumAggregate: ["CourseOnTermID", "Index", "FK_CourseID", "FK_TermID"],
  CourseOnTermMinAggregate: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  CourseOnTermMaxAggregate: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  SchoolCount: ["FK_Course", "FK_User", "FK_Professor", "Term"],
  SchoolCountAggregate: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType", "_all"],
  SchoolAvgAggregate: ["SchoolID"],
  SchoolSumAggregate: ["SchoolID"],
  SchoolMinAggregate: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType"],
  SchoolMaxAggregate: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType"],
  ProfessorCount: ["FK_Courses"],
  ProfessorCountAggregate: ["ProfessorID", "FK_SchoolID", "Name", "Email", "_all"],
  ProfessorAvgAggregate: ["ProfessorID", "FK_SchoolID"],
  ProfessorSumAggregate: ["ProfessorID", "FK_SchoolID"],
  ProfessorMinAggregate: ["ProfessorID", "FK_SchoolID", "Name", "Email"],
  ProfessorMaxAggregate: ["ProfessorID", "FK_SchoolID", "Name", "Email"],
  FlowCount: ["FK_FlashcardStacks", "FK_Tasks", "FK_FlowView"],
  FlowCountAggregate: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID", "_all"],
  FlowAvgAggregate: ["FK_CourseOnTermID", "FK_UserID"],
  FlowSumAggregate: ["FK_CourseOnTermID", "FK_UserID"],
  FlowMinAggregate: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  FlowMaxAggregate: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  FlowViewCountAggregate: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID", "_all"],
  FlowViewAvgAggregate: ["FlowViewID", "FK_UserID"],
  FlowViewSumAggregate: ["FlowViewID", "FK_UserID"],
  FlowViewMinAggregate: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlowViewMaxAggregate: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlashcardStackCount: ["FK_Flashcards", "FK_FlashcardStackReviews"],
  FlashcardStackCountAggregate: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description", "_all"],
  FlashcardStackMinAggregate: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  FlashcardStackMaxAggregate: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  FlashcardStackReviewCount: ["FK_FlashcardReviews"],
  FlashcardStackReviewCountAggregate: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID", "_all"],
  FlashcardStackReviewMinAggregate: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  FlashcardStackReviewMaxAggregate: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  FlashcardCount: ["FK_FlashcardReviews"],
  FlashcardCountAggregate: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "_all"],
  FlashcardAvgAggregate: ["Position"],
  FlashcardSumAggregate: ["Position"],
  FlashcardMinAggregate: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardMaxAggregate: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardReviewCountAggregate: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID", "_all"],
  FlashcardReviewMinAggregate: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  FlashcardReviewMaxAggregate: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  TaskCount: ["FK_TaskLabel"],
  TaskCountAggregate: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID", "_all"],
  TaskAvgAggregate: ["FK_UserID", "FK_CourseOnTermID"],
  TaskSumAggregate: ["FK_UserID", "FK_CourseOnTermID"],
  TaskMinAggregate: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  TaskMaxAggregate: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  TaskLabelCountAggregate: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID", "_all"],
  TaskLabelAvgAggregate: ["TaskLabelID"],
  TaskLabelSumAggregate: ["TaskLabelID"],
  TaskLabelMinAggregate: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  TaskLabelMaxAggregate: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  RepetitionCount: ["FK_Tasks"],
  RepetitionCountAggregate: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID", "_all"],
  RepetitionMinAggregate: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID"],
  RepetitionMaxAggregate: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID"],
  BlogCountAggregate: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body", "_all"],
  BlogAvgAggregate: ["FK_UserID"],
  BlogSumAggregate: ["FK_UserID"],
  BlogMinAggregate: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BlogMaxAggregate: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BugReportCountAggregate: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body", "_all"],
  BugReportAvgAggregate: ["FK_UserID"],
  BugReportSumAggregate: ["FK_UserID"],
  BugReportMinAggregate: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  BugReportMaxAggregate: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  FeatureRequestCountAggregate: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body", "_all"],
  FeatureRequestAvgAggregate: ["FK_UserID"],
  FeatureRequestSumAggregate: ["FK_UserID"],
  FeatureRequestMinAggregate: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"],
  FeatureRequestMaxAggregate: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"]
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<
  TOutput extends OutputTypesNames
  > = FieldsConfig<OutputTypeFieldNames<TOutput>>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName = outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  SettingWhereInput: ["AND", "OR", "NOT", "SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_User", "FK_UserID"],
  SettingOrderByWithRelationInput: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_User", "FK_UserID"],
  SettingWhereUniqueInput: ["SettingID", "FK_UserID"],
  SettingOrderByWithAggregationInput: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID", "_count", "_avg", "_max", "_min", "_sum"],
  SettingScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID"],
  AutomationLogWhereInput: ["AND", "OR", "NOT", "AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomation", "FK_CourseOnTermAutomationID"],
  AutomationLogOrderByWithRelationInput: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomation", "FK_CourseOnTermAutomationID"],
  AutomationLogWhereUniqueInput: ["AutomationLogID"],
  AutomationLogOrderByWithAggregationInput: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID", "_count", "_avg", "_max", "_min", "_sum"],
  AutomationLogScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  FriendshipWhereInput: ["AND", "OR", "NOT", "FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFrom", "FK_UserFromID", "FK_UserTo", "FK_UserToID"],
  FriendshipOrderByWithRelationInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFrom", "FK_UserFromID", "FK_UserTo", "FK_UserToID"],
  FriendshipWhereUniqueInput: ["FriendshipID"],
  FriendshipOrderByWithAggregationInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID", "_count", "_avg", "_max", "_min", "_sum"],
  FriendshipScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  CourseOnTermAutomationWhereInput: ["AND", "OR", "NOT", "CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "AutomationLog", "FK_Automation", "FK_AutomationID", "FK_CourseOnTerm", "FK_CourseOnTermID"],
  CourseOnTermAutomationOrderByWithRelationInput: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "AutomationLog", "FK_Automation", "FK_AutomationID", "FK_CourseOnTerm", "FK_CourseOnTermID"],
  CourseOnTermAutomationWhereUniqueInput: ["CourseOnTermAutomationID"],
  CourseOnTermAutomationOrderByWithAggregationInput: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID", "_count", "_avg", "_max", "_min", "_sum"],
  CourseOnTermAutomationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  AutomationWhereInput: ["AND", "OR", "NOT", "AutomationID", "RefreshToken", "CourseOnTermAutomations", "FK_User", "FK_UserID"],
  AutomationOrderByWithRelationInput: ["AutomationID", "RefreshToken", "CourseOnTermAutomations", "FK_User", "FK_UserID"],
  AutomationWhereUniqueInput: ["AutomationID", "RefreshToken", "FK_UserID"],
  AutomationOrderByWithAggregationInput: ["AutomationID", "RefreshToken", "FK_UserID", "_count", "_avg", "_max", "_min", "_sum"],
  AutomationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "AutomationID", "RefreshToken", "FK_UserID"],
  UserOnStudyGroupWhereInput: ["AND", "OR", "NOT", "UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_User", "FK_UserID", "FK_StudyGroup", "FK_StudyGroupID"],
  UserOnStudyGroupOrderByWithRelationInput: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_User", "FK_UserID", "FK_StudyGroup", "FK_StudyGroupID"],
  UserOnStudyGroupWhereUniqueInput: ["UserOnStudyGroupID"],
  UserOnStudyGroupOrderByWithAggregationInput: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID", "_count", "_avg", "_max", "_min", "_sum"],
  UserOnStudyGroupScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  StudyGroupWhereInput: ["AND", "OR", "NOT", "StudyGroupID", "Name", "FK_User", "FK_UserID", "FK_UserOnStudyGroup"],
  StudyGroupOrderByWithRelationInput: ["StudyGroupID", "Name", "FK_User", "FK_UserID", "FK_UserOnStudyGroup"],
  StudyGroupWhereUniqueInput: ["StudyGroupID"],
  StudyGroupOrderByWithAggregationInput: ["StudyGroupID", "Name", "FK_UserID", "_count", "_avg", "_max", "_min", "_sum"],
  StudyGroupScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "StudyGroupID", "Name", "FK_UserID"],
  UserWhereInput: ["AND", "OR", "NOT", "UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_SchoolID", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserOrderByWithRelationInput: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_SchoolID", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserWhereUniqueInput: ["UserID", "Email", "Username"],
  UserOrderByWithAggregationInput: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID", "_count", "_avg", "_max", "_min", "_sum"],
  UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  TermWhereInput: ["AND", "OR", "NOT", "TermID", "CreatedTime", "TermType", "TermName", "FK_User", "FK_UserID", "FK_School", "FK_SchoolID", "FK_CourseOnTerm"],
  TermOrderByWithRelationInput: ["TermID", "CreatedTime", "TermType", "TermName", "FK_User", "FK_UserID", "FK_School", "FK_SchoolID", "FK_CourseOnTerm"],
  TermWhereUniqueInput: ["TermID"],
  TermOrderByWithAggregationInput: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID", "_count", "_avg", "_max", "_min", "_sum"],
  TermScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  CourseWhereInput: ["AND", "OR", "NOT", "CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_School", "FK_SchoolID", "FK_Professor", "FK_ProfessorID", "CourseOnTerm"],
  CourseOrderByWithRelationInput: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_School", "FK_SchoolID", "FK_Professor", "FK_ProfessorID", "CourseOnTerm"],
  CourseWhereUniqueInput: ["CourseID"],
  CourseOrderByWithAggregationInput: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID", "_count", "_avg", "_max", "_min", "_sum"],
  CourseScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  CourseOnTermWhereInput: ["AND", "OR", "NOT", "CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_CourseID", "FK_Term", "FK_TermID", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermOrderByWithRelationInput: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_CourseID", "FK_Term", "FK_TermID", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermWhereUniqueInput: ["CourseOnTermID"],
  CourseOnTermOrderByWithAggregationInput: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID", "_count", "_avg", "_max", "_min", "_sum"],
  CourseOnTermScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  SchoolWhereInput: ["AND", "OR", "NOT", "SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_User", "FK_Professor", "Term"],
  SchoolOrderByWithRelationInput: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_User", "FK_Professor", "Term"],
  SchoolWhereUniqueInput: ["SchoolID"],
  SchoolOrderByWithAggregationInput: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType", "_count", "_avg", "_max", "_min", "_sum"],
  SchoolScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType"],
  ProfessorWhereInput: ["AND", "OR", "NOT", "ProfessorID", "FK_Courses", "FK_School", "FK_SchoolID", "Name", "Email"],
  ProfessorOrderByWithRelationInput: ["ProfessorID", "FK_Courses", "FK_School", "FK_SchoolID", "Name", "Email"],
  ProfessorWhereUniqueInput: ["ProfessorID"],
  ProfessorOrderByWithAggregationInput: ["ProfessorID", "FK_SchoolID", "Name", "Email", "_count", "_avg", "_max", "_min", "_sum"],
  ProfessorScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "ProfessorID", "FK_SchoolID", "Name", "Email"],
  FlowWhereInput: ["AND", "OR", "NOT", "FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_CourseOnTermID", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User", "FK_UserID", "FK_Repetition"],
  FlowOrderByWithRelationInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_CourseOnTermID", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User", "FK_UserID", "FK_Repetition"],
  FlowWhereUniqueInput: ["FlowID"],
  FlowOrderByWithAggregationInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID", "_count", "_avg", "_max", "_min", "_sum"],
  FlowScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  FlowViewWhereInput: ["AND", "OR", "NOT", "FlowViewID", "CreatedTime", "FK_Flow", "FK_FlowID", "FK_User", "FK_UserID"],
  FlowViewOrderByWithRelationInput: ["FlowViewID", "CreatedTime", "FK_Flow", "FK_FlowID", "FK_User", "FK_UserID"],
  FlowViewWhereUniqueInput: ["FlowViewID"],
  FlowViewOrderByWithAggregationInput: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID", "_count", "_avg", "_max", "_min", "_sum"],
  FlowViewScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlashcardStackWhereInput: ["AND", "OR", "NOT", "FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_FlowID", "FK_Flashcards", "FK_FlashcardStackReviews", "FK_Repetition", "Title", "Description"],
  FlashcardStackOrderByWithRelationInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_FlowID", "FK_Flashcards", "FK_FlashcardStackReviews", "FK_Repetition", "Title", "Description"],
  FlashcardStackWhereUniqueInput: ["FlashcardStackID"],
  FlashcardStackOrderByWithAggregationInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description", "_count", "_max", "_min"],
  FlashcardStackScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  FlashcardStackReviewWhereInput: ["AND", "OR", "NOT", "FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStack", "FK_FlashcardStackID", "FK_FlashcardReviews"],
  FlashcardStackReviewOrderByWithRelationInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStack", "FK_FlashcardStackID", "FK_FlashcardReviews"],
  FlashcardStackReviewWhereUniqueInput: ["FlashcardStackReviewID"],
  FlashcardStackReviewOrderByWithAggregationInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID", "_count", "_max", "_min"],
  FlashcardStackReviewScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  FlashcardWhereInput: ["AND", "OR", "NOT", "FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStack", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "FK_FlashcardReviews"],
  FlashcardOrderByWithRelationInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStack", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "FK_FlashcardReviews"],
  FlashcardWhereUniqueInput: ["FlashcardID"],
  FlashcardOrderByWithAggregationInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "_count", "_avg", "_max", "_min", "_sum"],
  FlashcardScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardReviewWhereInput: ["AND", "OR", "NOT", "FlashcardReviewID", "CreatedTime", "Status", "FK_Flashcard", "FK_FlashcardID", "FK_FlashcardStackReview", "FK_FlashcardStackReviewID"],
  FlashcardReviewOrderByWithRelationInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_Flashcard", "FK_FlashcardID", "FK_FlashcardStackReview", "FK_FlashcardStackReviewID"],
  FlashcardReviewWhereUniqueInput: ["FlashcardReviewID"],
  FlashcardReviewOrderByWithAggregationInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID", "_count", "_max", "_min"],
  FlashcardReviewScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  TaskWhereInput: ["AND", "OR", "NOT", "TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_UserID", "FK_Flow", "FK_FlowID", "FK_CourseOnTerm", "FK_CourseOnTermID", "FK_Repetition", "FK_RepetitionID"],
  TaskOrderByWithRelationInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_UserID", "FK_Flow", "FK_FlowID", "FK_CourseOnTerm", "FK_CourseOnTermID", "FK_Repetition", "FK_RepetitionID"],
  TaskWhereUniqueInput: ["TaskID"],
  TaskOrderByWithAggregationInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID", "_count", "_avg", "_max", "_min", "_sum"],
  TaskScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  TaskLabelWhereInput: ["AND", "OR", "NOT", "TaskLabelID", "CreatedTime", "Label", "FK_Task", "FK_TaskID"],
  TaskLabelOrderByWithRelationInput: ["TaskLabelID", "CreatedTime", "Label", "FK_Task", "FK_TaskID"],
  TaskLabelWhereUniqueInput: ["TaskLabelID"],
  TaskLabelOrderByWithAggregationInput: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID", "_count", "_avg", "_max", "_min", "_sum"],
  TaskLabelScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  RepetitionWhereInput: ["AND", "OR", "NOT", "RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_Flow", "FK_FlowID", "FK_FlashcardStack", "FK_FlashcardStackID", "FK_Tasks"],
  RepetitionOrderByWithRelationInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_Flow", "FK_FlowID", "FK_FlashcardStack", "FK_FlashcardStackID", "FK_Tasks"],
  RepetitionWhereUniqueInput: ["RepetitionID", "FK_FlowID", "FK_FlashcardStackID"],
  RepetitionOrderByWithAggregationInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID", "_count", "_max", "_min"],
  RepetitionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID"],
  BlogWhereInput: ["AND", "OR", "NOT", "BlogID", "CreatedTime", "DeletedTime", "FK_User", "FK_UserID", "Title", "Body"],
  BlogOrderByWithRelationInput: ["BlogID", "CreatedTime", "DeletedTime", "FK_User", "FK_UserID", "Title", "Body"],
  BlogWhereUniqueInput: ["BlogID"],
  BlogOrderByWithAggregationInput: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body", "_count", "_avg", "_max", "_min", "_sum"],
  BlogScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BugReportWhereInput: ["AND", "OR", "NOT", "BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_User", "FK_UserID", "Title", "Body"],
  BugReportOrderByWithRelationInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_User", "FK_UserID", "Title", "Body"],
  BugReportWhereUniqueInput: ["BugReportID"],
  BugReportOrderByWithAggregationInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body", "_count", "_avg", "_max", "_min", "_sum"],
  BugReportScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  FeatureRequestWhereInput: ["AND", "OR", "NOT", "FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_User", "FK_UserID", "Title", "Body"],
  FeatureRequestOrderByWithRelationInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_User", "FK_UserID", "Title", "Body"],
  FeatureRequestWhereUniqueInput: ["FeatureRequestID"],
  FeatureRequestOrderByWithAggregationInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body", "_count", "_avg", "_max", "_min", "_sum"],
  FeatureRequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"],
  SettingCreateInput: ["HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_User"],
  SettingUpdateInput: ["HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_User"],
  SettingCreateManyInput: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID"],
  SettingUpdateManyMutationInput: ["HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt"],
  AutomationLogCreateInput: ["Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomation"],
  AutomationLogUpdateInput: ["Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomation"],
  AutomationLogCreateManyInput: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  AutomationLogUpdateManyMutationInput: ["Time", "Success", "Message", "FileID"],
  FriendshipCreateInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFrom", "FK_UserTo"],
  FriendshipUpdateInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFrom", "FK_UserTo"],
  FriendshipCreateManyInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  FriendshipUpdateManyMutationInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime"],
  CourseOnTermAutomationCreateInput: ["FolderID", "DefaultType", "DefaultVisibility", "AutomationLog", "FK_Automation", "FK_CourseOnTerm"],
  CourseOnTermAutomationUpdateInput: ["FolderID", "DefaultType", "DefaultVisibility", "AutomationLog", "FK_Automation", "FK_CourseOnTerm"],
  CourseOnTermAutomationCreateManyInput: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  CourseOnTermAutomationUpdateManyMutationInput: ["FolderID", "DefaultType", "DefaultVisibility"],
  AutomationCreateInput: ["RefreshToken", "CourseOnTermAutomations", "FK_User"],
  AutomationUpdateInput: ["RefreshToken", "CourseOnTermAutomations", "FK_User"],
  AutomationCreateManyInput: ["AutomationID", "RefreshToken", "FK_UserID"],
  AutomationUpdateManyMutationInput: ["RefreshToken"],
  UserOnStudyGroupCreateInput: ["SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_User", "FK_StudyGroup"],
  UserOnStudyGroupUpdateInput: ["SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_User", "FK_StudyGroup"],
  UserOnStudyGroupCreateManyInput: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupUpdateManyMutationInput: ["SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime"],
  StudyGroupCreateInput: ["Name", "FK_User", "FK_UserOnStudyGroup"],
  StudyGroupUpdateInput: ["Name", "FK_User", "FK_UserOnStudyGroup"],
  StudyGroupCreateManyInput: ["StudyGroupID", "Name", "FK_UserID"],
  StudyGroupUpdateManyMutationInput: ["Name"],
  UserCreateInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserUpdateInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateManyInput: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  UserUpdateManyMutationInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess"],
  TermCreateInput: ["CreatedTime", "TermType", "TermName", "FK_User", "FK_School", "FK_CourseOnTerm"],
  TermUpdateInput: ["CreatedTime", "TermType", "TermName", "FK_User", "FK_School", "FK_CourseOnTerm"],
  TermCreateManyInput: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  TermUpdateManyMutationInput: ["CreatedTime", "TermType", "TermName"],
  CourseCreateInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_School", "FK_Professor", "CourseOnTerm"],
  CourseUpdateInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_School", "FK_Professor", "CourseOnTerm"],
  CourseCreateManyInput: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  CourseUpdateManyMutationInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title"],
  CourseOnTermCreateInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Term", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermUpdateInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Term", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermCreateManyInput: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  CourseOnTermUpdateManyMutationInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew"],
  SchoolCreateInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_User", "FK_Professor", "Term"],
  SchoolUpdateInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_User", "FK_Professor", "Term"],
  SchoolCreateManyInput: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType"],
  SchoolUpdateManyMutationInput: ["Name", "HasClassSupport", "SearchIndex", "TermType"],
  ProfessorCreateInput: ["FK_Courses", "FK_School", "Name", "Email"],
  ProfessorUpdateInput: ["FK_Courses", "FK_School", "Name", "Email"],
  ProfessorCreateManyInput: ["ProfessorID", "FK_SchoolID", "Name", "Email"],
  ProfessorUpdateManyMutationInput: ["Name", "Email"],
  FlowCreateInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User", "FK_Repetition"],
  FlowUpdateInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User", "FK_Repetition"],
  FlowCreateManyInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  FlowUpdateManyMutationInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime"],
  FlowViewCreateInput: ["CreatedTime", "FK_Flow", "FK_User"],
  FlowViewUpdateInput: ["CreatedTime", "FK_Flow", "FK_User"],
  FlowViewCreateManyInput: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlowViewUpdateManyMutationInput: ["CreatedTime"],
  FlashcardStackCreateInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_Flashcards", "FK_FlashcardStackReviews", "FK_Repetition", "Title", "Description"],
  FlashcardStackUpdateInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_Flashcards", "FK_FlashcardStackReviews", "FK_Repetition", "Title", "Description"],
  FlashcardStackCreateManyInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  FlashcardStackUpdateManyMutationInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "Title", "Description"],
  FlashcardStackReviewCreateInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStack", "FK_FlashcardReviews"],
  FlashcardStackReviewUpdateInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStack", "FK_FlashcardReviews"],
  FlashcardStackReviewCreateManyInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  FlashcardStackReviewUpdateManyMutationInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime"],
  FlashcardCreateInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStack", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "FK_FlashcardReviews"],
  FlashcardUpdateInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStack", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "FK_FlashcardReviews"],
  FlashcardCreateManyInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardUpdateManyMutationInput: ["FlashcardID", "CreatedTime", "DeletedTime", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardReviewCreateInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_Flashcard", "FK_FlashcardStackReview"],
  FlashcardReviewUpdateInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_Flashcard", "FK_FlashcardStackReview"],
  FlashcardReviewCreateManyInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  FlashcardReviewUpdateManyMutationInput: ["FlashcardReviewID", "CreatedTime", "Status"],
  TaskCreateInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_Flow", "FK_CourseOnTerm", "FK_Repetition"],
  TaskUpdateInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_Flow", "FK_CourseOnTerm", "FK_Repetition"],
  TaskCreateManyInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  TaskUpdateManyMutationInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type"],
  TaskLabelCreateInput: ["CreatedTime", "Label", "FK_Task"],
  TaskLabelUpdateInput: ["CreatedTime", "Label", "FK_Task"],
  TaskLabelCreateManyInput: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  TaskLabelUpdateManyMutationInput: ["CreatedTime", "Label"],
  RepetitionCreateInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_Flow", "FK_FlashcardStack", "FK_Tasks"],
  RepetitionUpdateInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_Flow", "FK_FlashcardStack", "FK_Tasks"],
  RepetitionCreateManyInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID"],
  RepetitionUpdateManyMutationInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType"],
  BlogCreateInput: ["BlogID", "CreatedTime", "DeletedTime", "FK_User", "Title", "Body"],
  BlogUpdateInput: ["BlogID", "CreatedTime", "DeletedTime", "FK_User", "Title", "Body"],
  BlogCreateManyInput: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BlogUpdateManyMutationInput: ["BlogID", "CreatedTime", "DeletedTime", "Title", "Body"],
  BugReportCreateInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_User", "Title", "Body"],
  BugReportUpdateInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_User", "Title", "Body"],
  BugReportCreateManyInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  BugReportUpdateManyMutationInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "Title", "Body"],
  FeatureRequestCreateInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_User", "Title", "Body"],
  FeatureRequestUpdateInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_User", "Title", "Body"],
  FeatureRequestCreateManyInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"],
  FeatureRequestUpdateManyMutationInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "Title", "Body"],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  BoolNullableFilter: ["equals", "not"],
  DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  UserRelationFilter: ["is", "isNot"],
  SettingCountOrderByAggregateInput: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID"],
  SettingAvgOrderByAggregateInput: ["SettingID", "FK_UserID"],
  SettingMaxOrderByAggregateInput: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID"],
  SettingMinOrderByAggregateInput: ["SettingID", "HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt", "FK_UserID"],
  SettingSumOrderByAggregateInput: ["SettingID", "FK_UserID"],
  IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  BoolFilter: ["equals", "not"],
  StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  CourseOnTermAutomationRelationFilter: ["is", "isNot"],
  IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  AutomationLogCountOrderByAggregateInput: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  AutomationLogAvgOrderByAggregateInput: ["AutomationLogID", "FK_CourseOnTermAutomationID"],
  AutomationLogMaxOrderByAggregateInput: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  AutomationLogMinOrderByAggregateInput: ["AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  AutomationLogSumOrderByAggregateInput: ["AutomationLogID", "FK_CourseOnTermAutomationID"],
  DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  FriendshipCountOrderByAggregateInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  FriendshipAvgOrderByAggregateInput: ["FK_UserFromID", "FK_UserToID"],
  FriendshipMaxOrderByAggregateInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  FriendshipMinOrderByAggregateInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  FriendshipSumOrderByAggregateInput: ["FK_UserFromID", "FK_UserToID"],
  EnumFlowTypeFilter: ["equals", "in", "notIn", "not"],
  EnumVisibilityFilter: ["equals", "in", "notIn", "not"],
  AutomationLogListRelationFilter: ["every", "some", "none"],
  AutomationRelationFilter: ["is", "isNot"],
  CourseOnTermRelationFilter: ["is", "isNot"],
  AutomationLogOrderByRelationAggregateInput: ["_count"],
  CourseOnTermAutomationCountOrderByAggregateInput: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  CourseOnTermAutomationAvgOrderByAggregateInput: ["CourseOnTermAutomationID", "FK_AutomationID", "FK_CourseOnTermID"],
  CourseOnTermAutomationMaxOrderByAggregateInput: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  CourseOnTermAutomationMinOrderByAggregateInput: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  CourseOnTermAutomationSumOrderByAggregateInput: ["CourseOnTermAutomationID", "FK_AutomationID", "FK_CourseOnTermID"],
  EnumFlowTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  EnumVisibilityWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  CourseOnTermAutomationListRelationFilter: ["every", "some", "none"],
  CourseOnTermAutomationOrderByRelationAggregateInput: ["_count"],
  AutomationCountOrderByAggregateInput: ["AutomationID", "RefreshToken", "FK_UserID"],
  AutomationAvgOrderByAggregateInput: ["AutomationID", "FK_UserID"],
  AutomationMaxOrderByAggregateInput: ["AutomationID", "RefreshToken", "FK_UserID"],
  AutomationMinOrderByAggregateInput: ["AutomationID", "RefreshToken", "FK_UserID"],
  AutomationSumOrderByAggregateInput: ["AutomationID", "FK_UserID"],
  StudyGroupRelationFilter: ["is", "isNot"],
  UserOnStudyGroupCountOrderByAggregateInput: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupAvgOrderByAggregateInput: ["UserOnStudyGroupID", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupMaxOrderByAggregateInput: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupMinOrderByAggregateInput: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupSumOrderByAggregateInput: ["UserOnStudyGroupID", "FK_UserID", "FK_StudyGroupID"],
  UserOnStudyGroupListRelationFilter: ["every", "some", "none"],
  UserOnStudyGroupOrderByRelationAggregateInput: ["_count"],
  StudyGroupCountOrderByAggregateInput: ["StudyGroupID", "Name", "FK_UserID"],
  StudyGroupAvgOrderByAggregateInput: ["StudyGroupID", "FK_UserID"],
  StudyGroupMaxOrderByAggregateInput: ["StudyGroupID", "Name", "FK_UserID"],
  StudyGroupMinOrderByAggregateInput: ["StudyGroupID", "Name", "FK_UserID"],
  StudyGroupSumOrderByAggregateInput: ["StudyGroupID", "FK_UserID"],
  EnumSetupStepFilter: ["equals", "in", "notIn", "not"],
  SchoolRelationFilter: ["is", "isNot"],
  TermListRelationFilter: ["every", "some", "none"],
  TaskListRelationFilter: ["every", "some", "none"],
  SettingRelationFilter: ["is", "isNot"],
  FlowViewListRelationFilter: ["every", "some", "none"],
  FlowListRelationFilter: ["every", "some", "none"],
  AutomationListRelationFilter: ["every", "some", "none"],
  StudyGroupListRelationFilter: ["every", "some", "none"],
  FriendshipListRelationFilter: ["every", "some", "none"],
  BlogListRelationFilter: ["every", "some", "none"],
  BugReportListRelationFilter: ["every", "some", "none"],
  FeatureRequestListRelationFilter: ["every", "some", "none"],
  TermOrderByRelationAggregateInput: ["_count"],
  TaskOrderByRelationAggregateInput: ["_count"],
  FlowViewOrderByRelationAggregateInput: ["_count"],
  FlowOrderByRelationAggregateInput: ["_count"],
  AutomationOrderByRelationAggregateInput: ["_count"],
  StudyGroupOrderByRelationAggregateInput: ["_count"],
  FriendshipOrderByRelationAggregateInput: ["_count"],
  BlogOrderByRelationAggregateInput: ["_count"],
  BugReportOrderByRelationAggregateInput: ["_count"],
  FeatureRequestOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  UserAvgOrderByAggregateInput: ["UserID", "FK_SchoolID"],
  UserMaxOrderByAggregateInput: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  UserMinOrderByAggregateInput: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  UserSumOrderByAggregateInput: ["UserID", "FK_SchoolID"],
  EnumSetupStepWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  EnumTermTypeFilter: ["equals", "in", "notIn", "not"],
  CourseOnTermListRelationFilter: ["every", "some", "none"],
  CourseOnTermOrderByRelationAggregateInput: ["_count"],
  TermCountOrderByAggregateInput: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  TermAvgOrderByAggregateInput: ["TermID", "FK_UserID", "FK_SchoolID"],
  TermMaxOrderByAggregateInput: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  TermMinOrderByAggregateInput: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  TermSumOrderByAggregateInput: ["TermID", "FK_UserID", "FK_SchoolID"],
  EnumTermTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  ProfessorRelationFilter: ["is", "isNot"],
  CourseCountOrderByAggregateInput: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  CourseAvgOrderByAggregateInput: ["CourseID", "FK_SchoolID", "FK_ProfessorID"],
  CourseMaxOrderByAggregateInput: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  CourseMinOrderByAggregateInput: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  CourseSumOrderByAggregateInput: ["CourseID", "FK_SchoolID", "FK_ProfessorID"],
  CourseRelationFilter: ["is", "isNot"],
  TermRelationFilter: ["is", "isNot"],
  CourseOnTermCountOrderByAggregateInput: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  CourseOnTermAvgOrderByAggregateInput: ["CourseOnTermID", "Index", "FK_CourseID", "FK_TermID"],
  CourseOnTermMaxOrderByAggregateInput: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  CourseOnTermMinOrderByAggregateInput: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  CourseOnTermSumOrderByAggregateInput: ["CourseOnTermID", "Index", "FK_CourseID", "FK_TermID"],
  EnumTermTypeNullableFilter: ["equals", "in", "notIn", "not"],
  CourseListRelationFilter: ["every", "some", "none"],
  UserListRelationFilter: ["every", "some", "none"],
  ProfessorListRelationFilter: ["every", "some", "none"],
  CourseOrderByRelationAggregateInput: ["_count"],
  UserOrderByRelationAggregateInput: ["_count"],
  ProfessorOrderByRelationAggregateInput: ["_count"],
  SchoolCountOrderByAggregateInput: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType"],
  SchoolAvgOrderByAggregateInput: ["SchoolID"],
  SchoolMaxOrderByAggregateInput: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType"],
  SchoolMinOrderByAggregateInput: ["SchoolID", "Name", "HasClassSupport", "SearchIndex", "TermType"],
  SchoolSumOrderByAggregateInput: ["SchoolID"],
  EnumTermTypeNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  ProfessorCountOrderByAggregateInput: ["ProfessorID", "FK_SchoolID", "Name", "Email"],
  ProfessorAvgOrderByAggregateInput: ["ProfessorID", "FK_SchoolID"],
  ProfessorMaxOrderByAggregateInput: ["ProfessorID", "FK_SchoolID", "Name", "Email"],
  ProfessorMinOrderByAggregateInput: ["ProfessorID", "FK_SchoolID", "Name", "Email"],
  ProfessorSumOrderByAggregateInput: ["ProfessorID", "FK_SchoolID"],
  FlashcardStackListRelationFilter: ["every", "some", "none"],
  RepetitionRelationFilter: ["is", "isNot"],
  FlashcardStackOrderByRelationAggregateInput: ["_count"],
  FlowCountOrderByAggregateInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  FlowAvgOrderByAggregateInput: ["FK_CourseOnTermID", "FK_UserID"],
  FlowMaxOrderByAggregateInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  FlowMinOrderByAggregateInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  FlowSumOrderByAggregateInput: ["FK_CourseOnTermID", "FK_UserID"],
  FlowRelationFilter: ["is", "isNot"],
  FlowViewCountOrderByAggregateInput: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlowViewAvgOrderByAggregateInput: ["FlowViewID", "FK_UserID"],
  FlowViewMaxOrderByAggregateInput: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlowViewMinOrderByAggregateInput: ["FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlowViewSumOrderByAggregateInput: ["FlowViewID", "FK_UserID"],
  FlashcardListRelationFilter: ["every", "some", "none"],
  FlashcardStackReviewListRelationFilter: ["every", "some", "none"],
  FlashcardOrderByRelationAggregateInput: ["_count"],
  FlashcardStackReviewOrderByRelationAggregateInput: ["_count"],
  FlashcardStackCountOrderByAggregateInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  FlashcardStackMaxOrderByAggregateInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  FlashcardStackMinOrderByAggregateInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  FlashcardStackRelationFilter: ["is", "isNot"],
  FlashcardReviewListRelationFilter: ["every", "some", "none"],
  FlashcardReviewOrderByRelationAggregateInput: ["_count"],
  FlashcardStackReviewCountOrderByAggregateInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  FlashcardStackReviewMaxOrderByAggregateInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  FlashcardStackReviewMinOrderByAggregateInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  FlashcardCountOrderByAggregateInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardAvgOrderByAggregateInput: ["Position"],
  FlashcardMaxOrderByAggregateInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardMinOrderByAggregateInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardSumOrderByAggregateInput: ["Position"],
  EnumFlashcardStatusFilter: ["equals", "in", "notIn", "not"],
  FlashcardRelationFilter: ["is", "isNot"],
  FlashcardStackReviewRelationFilter: ["is", "isNot"],
  FlashcardReviewCountOrderByAggregateInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  FlashcardReviewMaxOrderByAggregateInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  FlashcardReviewMinOrderByAggregateInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  EnumFlashcardStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  EnumTaskTypeNullableFilter: ["equals", "in", "notIn", "not"],
  TaskLabelListRelationFilter: ["every", "some", "none"],
  TaskLabelOrderByRelationAggregateInput: ["_count"],
  TaskCountOrderByAggregateInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  TaskAvgOrderByAggregateInput: ["FK_UserID", "FK_CourseOnTermID"],
  TaskMaxOrderByAggregateInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  TaskMinOrderByAggregateInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  TaskSumOrderByAggregateInput: ["FK_UserID", "FK_CourseOnTermID"],
  EnumTaskTypeNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  TaskRelationFilter: ["is", "isNot"],
  TaskLabelCountOrderByAggregateInput: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  TaskLabelAvgOrderByAggregateInput: ["TaskLabelID"],
  TaskLabelMaxOrderByAggregateInput: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  TaskLabelMinOrderByAggregateInput: ["TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  TaskLabelSumOrderByAggregateInput: ["TaskLabelID"],
  EnumRepetitionTypeFilter: ["equals", "in", "notIn", "not"],
  RepetitionCountOrderByAggregateInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID"],
  RepetitionMaxOrderByAggregateInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID"],
  RepetitionMinOrderByAggregateInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlowID", "FK_FlashcardStackID"],
  EnumRepetitionTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  BlogCountOrderByAggregateInput: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BlogAvgOrderByAggregateInput: ["FK_UserID"],
  BlogMaxOrderByAggregateInput: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BlogMinOrderByAggregateInput: ["BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BlogSumOrderByAggregateInput: ["FK_UserID"],
  BugReportCountOrderByAggregateInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  BugReportAvgOrderByAggregateInput: ["FK_UserID"],
  BugReportMaxOrderByAggregateInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  BugReportMinOrderByAggregateInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  BugReportSumOrderByAggregateInput: ["FK_UserID"],
  FeatureRequestCountOrderByAggregateInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"],
  FeatureRequestAvgOrderByAggregateInput: ["FK_UserID"],
  FeatureRequestMaxOrderByAggregateInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"],
  FeatureRequestMinOrderByAggregateInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"],
  FeatureRequestSumOrderByAggregateInput: ["FK_UserID"],
  UserCreateNestedOneWithoutFK_SettingsInput: ["create", "connectOrCreate", "connect"],
  NullableBoolFieldUpdateOperationsInput: ["set"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  UserUpdateOneWithoutFK_SettingsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  CourseOnTermAutomationCreateNestedOneWithoutAutomationLogInput: ["create", "connectOrCreate", "connect"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  BoolFieldUpdateOperationsInput: ["set"],
  StringFieldUpdateOperationsInput: ["set"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  CourseOnTermAutomationUpdateOneWithoutAutomationLogInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  UserCreateNestedOneWithoutFK_FriendshipsInitiatedInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutFK_FriendshipsAcceptedInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneWithoutFK_FriendshipsInitiatedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserUpdateOneWithoutFK_FriendshipsAcceptedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AutomationLogCreateNestedManyWithoutFK_CourseOnTermAutomationInput: ["create", "connectOrCreate", "createMany", "connect"],
  AutomationCreateNestedOneWithoutCourseOnTermAutomationsInput: ["create", "connectOrCreate", "connect"],
  CourseOnTermCreateNestedOneWithoutCourseOnTermAutomationInput: ["create", "connectOrCreate", "connect"],
  EnumFlowTypeFieldUpdateOperationsInput: ["set"],
  EnumVisibilityFieldUpdateOperationsInput: ["set"],
  AutomationLogUpdateManyWithoutFK_CourseOnTermAutomationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AutomationUpdateOneWithoutCourseOnTermAutomationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  CourseOnTermUpdateOneWithoutCourseOnTermAutomationInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  CourseOnTermAutomationCreateNestedManyWithoutFK_AutomationInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserCreateNestedOneWithoutFK_AutomationInput: ["create", "connectOrCreate", "connect"],
  CourseOnTermAutomationUpdateManyWithoutFK_AutomationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserUpdateOneWithoutFK_AutomationInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutFK_UserOnStudyGroupsInput: ["create", "connectOrCreate", "connect"],
  StudyGroupCreateNestedOneWithoutFK_UserOnStudyGroupInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneWithoutFK_UserOnStudyGroupsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  StudyGroupUpdateOneWithoutFK_UserOnStudyGroupInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutFK_StudyGroupsInput: ["create", "connectOrCreate", "connect"],
  UserOnStudyGroupCreateNestedManyWithoutFK_StudyGroupInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateOneWithoutFK_StudyGroupsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserOnStudyGroupUpdateManyWithoutFK_StudyGroupInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SchoolCreateNestedOneWithoutFK_UserInput: ["create", "connectOrCreate", "connect"],
  TermCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  TaskCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  SettingCreateNestedOneWithoutFK_UserInput: ["create", "connectOrCreate", "connect"],
  FlowViewCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  FlowCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  AutomationCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  StudyGroupCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserOnStudyGroupCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  FriendshipCreateNestedManyWithoutFK_UserFromInput: ["create", "connectOrCreate", "createMany", "connect"],
  FriendshipCreateNestedManyWithoutFK_UserToInput: ["create", "connectOrCreate", "createMany", "connect"],
  BlogCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  BugReportCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  FeatureRequestCreateNestedManyWithoutFK_UserInput: ["create", "connectOrCreate", "createMany", "connect"],
  EnumSetupStepFieldUpdateOperationsInput: ["set"],
  SchoolUpdateOneWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TermUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TaskUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SettingUpdateOneWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlowViewUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FlowUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AutomationUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  StudyGroupUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserOnStudyGroupUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FriendshipUpdateManyWithoutFK_UserFromInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FriendshipUpdateManyWithoutFK_UserToInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  BlogUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  BugReportUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FeatureRequestUpdateManyWithoutFK_UserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedOneWithoutFK_TermsInput: ["create", "connectOrCreate", "connect"],
  SchoolCreateNestedOneWithoutTermInput: ["create", "connectOrCreate", "connect"],
  CourseOnTermCreateNestedManyWithoutFK_TermInput: ["create", "connectOrCreate", "createMany", "connect"],
  EnumTermTypeFieldUpdateOperationsInput: ["set"],
  UserUpdateOneWithoutFK_TermsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  SchoolUpdateOneWithoutTermInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  CourseOnTermUpdateManyWithoutFK_TermInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SchoolCreateNestedOneWithoutFK_CourseInput: ["create", "connectOrCreate", "connect"],
  ProfessorCreateNestedOneWithoutFK_CoursesInput: ["create", "connectOrCreate", "connect"],
  CourseOnTermCreateNestedManyWithoutFK_CourseInput: ["create", "connectOrCreate", "createMany", "connect"],
  SchoolUpdateOneWithoutFK_CourseInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  ProfessorUpdateOneWithoutFK_CoursesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  CourseOnTermUpdateManyWithoutFK_CourseInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CourseCreateNestedOneWithoutCourseOnTermInput: ["create", "connectOrCreate", "connect"],
  TermCreateNestedOneWithoutFK_CourseOnTermInput: ["create", "connectOrCreate", "connect"],
  FlowCreateNestedManyWithoutFK_CourseOnTermInput: ["create", "connectOrCreate", "createMany", "connect"],
  TaskCreateNestedManyWithoutFK_CourseOnTermInput: ["create", "connectOrCreate", "createMany", "connect"],
  CourseOnTermAutomationCreateNestedManyWithoutFK_CourseOnTermInput: ["create", "connectOrCreate", "createMany", "connect"],
  CourseUpdateOneWithoutCourseOnTermInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TermUpdateOneWithoutFK_CourseOnTermInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlowUpdateManyWithoutFK_CourseOnTermInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TaskUpdateManyWithoutFK_CourseOnTermInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CourseOnTermAutomationUpdateManyWithoutFK_CourseOnTermInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CourseCreateNestedManyWithoutFK_SchoolInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserCreateNestedManyWithoutFK_SchoolInput: ["create", "connectOrCreate", "createMany", "connect"],
  ProfessorCreateNestedManyWithoutFK_SchoolInput: ["create", "connectOrCreate", "createMany", "connect"],
  TermCreateNestedManyWithoutFK_SchoolInput: ["create", "connectOrCreate", "createMany", "connect"],
  NullableEnumTermTypeFieldUpdateOperationsInput: ["set"],
  CourseUpdateManyWithoutFK_SchoolInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserUpdateManyWithoutFK_SchoolInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ProfessorUpdateManyWithoutFK_SchoolInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TermUpdateManyWithoutFK_SchoolInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CourseCreateNestedManyWithoutFK_ProfessorInput: ["create", "connectOrCreate", "createMany", "connect"],
  SchoolCreateNestedOneWithoutFK_ProfessorInput: ["create", "connectOrCreate", "connect"],
  CourseUpdateManyWithoutFK_ProfessorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SchoolUpdateOneWithoutFK_ProfessorInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  CourseOnTermCreateNestedOneWithoutFK_FlowsInput: ["create", "connectOrCreate", "connect"],
  FlashcardStackCreateNestedManyWithoutFK_FlowInput: ["create", "connectOrCreate", "createMany", "connect"],
  TaskCreateNestedManyWithoutFK_FlowInput: ["create", "connectOrCreate", "createMany", "connect"],
  FlowViewCreateNestedManyWithoutFK_FlowInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserCreateNestedOneWithoutFK_FlowInput: ["create", "connectOrCreate", "connect"],
  RepetitionCreateNestedOneWithoutFK_FlowInput: ["create", "connectOrCreate", "connect"],
  CourseOnTermUpdateOneWithoutFK_FlowsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlashcardStackUpdateManyWithoutFK_FlowInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TaskUpdateManyWithoutFK_FlowInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FlowViewUpdateManyWithoutFK_FlowInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserUpdateOneWithoutFK_FlowInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  RepetitionUpdateOneWithoutFK_FlowInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlowCreateNestedOneWithoutFK_FlowViewInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutFK_FlowViewInput: ["create", "connectOrCreate", "connect"],
  FlowUpdateOneWithoutFK_FlowViewInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserUpdateOneWithoutFK_FlowViewInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlowCreateNestedOneWithoutFK_FlashcardStacksInput: ["create", "connectOrCreate", "connect"],
  FlashcardCreateNestedManyWithoutFK_FlashcardStackInput: ["create", "connectOrCreate", "createMany", "connect"],
  FlashcardStackReviewCreateNestedManyWithoutFK_FlashcardStackInput: ["create", "connectOrCreate", "createMany", "connect"],
  RepetitionCreateNestedOneWithoutFK_FlashcardStackInput: ["create", "connectOrCreate", "connect"],
  FlowUpdateOneWithoutFK_FlashcardStacksInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlashcardUpdateManyWithoutFK_FlashcardStackInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FlashcardStackReviewUpdateManyWithoutFK_FlashcardStackInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  RepetitionUpdateOneWithoutFK_FlashcardStackInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlashcardStackCreateNestedOneWithoutFK_FlashcardStackReviewsInput: ["create", "connectOrCreate", "connect"],
  FlashcardReviewCreateNestedManyWithoutFK_FlashcardStackReviewInput: ["create", "connectOrCreate", "createMany", "connect"],
  FlashcardStackUpdateOneWithoutFK_FlashcardStackReviewsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlashcardReviewUpdateManyWithoutFK_FlashcardStackReviewInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FlashcardStackCreateNestedOneWithoutFK_FlashcardsInput: ["create", "connectOrCreate", "connect"],
  FlashcardReviewCreateNestedManyWithoutFK_FlashcardInput: ["create", "connectOrCreate", "createMany", "connect"],
  FlashcardStackUpdateOneWithoutFK_FlashcardsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlashcardReviewUpdateManyWithoutFK_FlashcardInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FlashcardCreateNestedOneWithoutFK_FlashcardReviewsInput: ["create", "connectOrCreate", "connect"],
  FlashcardStackReviewCreateNestedOneWithoutFK_FlashcardReviewsInput: ["create", "connectOrCreate", "connect"],
  EnumFlashcardStatusFieldUpdateOperationsInput: ["set"],
  FlashcardUpdateOneWithoutFK_FlashcardReviewsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlashcardStackReviewUpdateOneWithoutFK_FlashcardReviewsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TaskLabelCreateNestedManyWithoutFK_TaskInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserCreateNestedOneWithoutFK_TaskInput: ["create", "connectOrCreate", "connect"],
  FlowCreateNestedOneWithoutFK_TasksInput: ["create", "connectOrCreate", "connect"],
  CourseOnTermCreateNestedOneWithoutFK_TasksInput: ["create", "connectOrCreate", "connect"],
  RepetitionCreateNestedOneWithoutFK_TasksInput: ["create", "connectOrCreate", "connect"],
  NullableEnumTaskTypeFieldUpdateOperationsInput: ["set"],
  TaskLabelUpdateManyWithoutFK_TaskInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserUpdateOneWithoutFK_TaskInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlowUpdateOneWithoutFK_TasksInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  CourseOnTermUpdateOneWithoutFK_TasksInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  RepetitionUpdateOneWithoutFK_TasksInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TaskCreateNestedOneWithoutFK_TaskLabelInput: ["create", "connectOrCreate", "connect"],
  TaskUpdateOneWithoutFK_TaskLabelInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlowCreateNestedOneWithoutFK_RepetitionInput: ["create", "connectOrCreate", "connect"],
  FlashcardStackCreateNestedOneWithoutFK_RepetitionInput: ["create", "connectOrCreate", "connect"],
  TaskCreateNestedManyWithoutFK_RepetitionInput: ["create", "connectOrCreate", "createMany", "connect"],
  EnumRepetitionTypeFieldUpdateOperationsInput: ["set"],
  FlowUpdateOneWithoutFK_RepetitionInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FlashcardStackUpdateOneWithoutFK_RepetitionInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TaskUpdateManyWithoutFK_RepetitionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedOneWithoutFK_BlogInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneWithoutFK_BlogInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutFK_BugReportInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneWithoutFK_BugReportInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutFK_FeatureRequestInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneWithoutFK_FeatureRequestInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolNullableFilter: ["equals", "not"],
  NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolFilter: ["equals", "not"],
  NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedEnumFlowTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumVisibilityFilter: ["equals", "in", "notIn", "not"],
  NestedEnumFlowTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumVisibilityWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumSetupStepFilter: ["equals", "in", "notIn", "not"],
  NestedEnumSetupStepWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumTermTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumTermTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumTermTypeNullableFilter: ["equals", "in", "notIn", "not"],
  NestedEnumTermTypeNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumFlashcardStatusFilter: ["equals", "in", "notIn", "not"],
  NestedEnumFlashcardStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumTaskTypeNullableFilter: ["equals", "in", "notIn", "not"],
  NestedEnumTaskTypeNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumRepetitionTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumRepetitionTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  UserCreateWithoutFK_SettingsInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_SettingsInput: ["where", "create"],
  UserUpsertWithoutFK_SettingsInput: ["update", "create"],
  UserUpdateWithoutFK_SettingsInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  CourseOnTermAutomationCreateWithoutAutomationLogInput: ["FolderID", "DefaultType", "DefaultVisibility", "FK_Automation", "FK_CourseOnTerm"],
  CourseOnTermAutomationCreateOrConnectWithoutAutomationLogInput: ["where", "create"],
  CourseOnTermAutomationUpsertWithoutAutomationLogInput: ["update", "create"],
  CourseOnTermAutomationUpdateWithoutAutomationLogInput: ["FolderID", "DefaultType", "DefaultVisibility", "FK_Automation", "FK_CourseOnTerm"],
  UserCreateWithoutFK_FriendshipsInitiatedInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_FriendshipsInitiatedInput: ["where", "create"],
  UserCreateWithoutFK_FriendshipsAcceptedInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_FriendshipsAcceptedInput: ["where", "create"],
  UserUpsertWithoutFK_FriendshipsInitiatedInput: ["update", "create"],
  UserUpdateWithoutFK_FriendshipsInitiatedInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserUpsertWithoutFK_FriendshipsAcceptedInput: ["update", "create"],
  UserUpdateWithoutFK_FriendshipsAcceptedInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  AutomationLogCreateWithoutFK_CourseOnTermAutomationInput: ["Time", "Success", "Message", "FileID"],
  AutomationLogCreateOrConnectWithoutFK_CourseOnTermAutomationInput: ["where", "create"],
  AutomationLogCreateManyFK_CourseOnTermAutomationInputEnvelope: ["data", "skipDuplicates"],
  AutomationCreateWithoutCourseOnTermAutomationsInput: ["RefreshToken", "FK_User"],
  AutomationCreateOrConnectWithoutCourseOnTermAutomationsInput: ["where", "create"],
  CourseOnTermCreateWithoutCourseOnTermAutomationInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Term", "FK_Flows", "FK_Tasks"],
  CourseOnTermCreateOrConnectWithoutCourseOnTermAutomationInput: ["where", "create"],
  AutomationLogUpsertWithWhereUniqueWithoutFK_CourseOnTermAutomationInput: ["where", "update", "create"],
  AutomationLogUpdateWithWhereUniqueWithoutFK_CourseOnTermAutomationInput: ["where", "data"],
  AutomationLogUpdateManyWithWhereWithoutFK_CourseOnTermAutomationInput: ["where", "data"],
  AutomationLogScalarWhereInput: ["AND", "OR", "NOT", "AutomationLogID", "Time", "Success", "Message", "FileID", "FK_CourseOnTermAutomationID"],
  AutomationUpsertWithoutCourseOnTermAutomationsInput: ["update", "create"],
  AutomationUpdateWithoutCourseOnTermAutomationsInput: ["RefreshToken", "FK_User"],
  CourseOnTermUpsertWithoutCourseOnTermAutomationInput: ["update", "create"],
  CourseOnTermUpdateWithoutCourseOnTermAutomationInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Term", "FK_Flows", "FK_Tasks"],
  CourseOnTermAutomationCreateWithoutFK_AutomationInput: ["FolderID", "DefaultType", "DefaultVisibility", "AutomationLog", "FK_CourseOnTerm"],
  CourseOnTermAutomationCreateOrConnectWithoutFK_AutomationInput: ["where", "create"],
  CourseOnTermAutomationCreateManyFK_AutomationInputEnvelope: ["data", "skipDuplicates"],
  UserCreateWithoutFK_AutomationInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_AutomationInput: ["where", "create"],
  CourseOnTermAutomationUpsertWithWhereUniqueWithoutFK_AutomationInput: ["where", "update", "create"],
  CourseOnTermAutomationUpdateWithWhereUniqueWithoutFK_AutomationInput: ["where", "data"],
  CourseOnTermAutomationUpdateManyWithWhereWithoutFK_AutomationInput: ["where", "data"],
  CourseOnTermAutomationScalarWhereInput: ["AND", "OR", "NOT", "CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID", "FK_CourseOnTermID"],
  UserUpsertWithoutFK_AutomationInput: ["update", "create"],
  UserUpdateWithoutFK_AutomationInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateWithoutFK_UserOnStudyGroupsInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_UserOnStudyGroupsInput: ["where", "create"],
  StudyGroupCreateWithoutFK_UserOnStudyGroupInput: ["Name", "FK_User"],
  StudyGroupCreateOrConnectWithoutFK_UserOnStudyGroupInput: ["where", "create"],
  UserUpsertWithoutFK_UserOnStudyGroupsInput: ["update", "create"],
  UserUpdateWithoutFK_UserOnStudyGroupsInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  StudyGroupUpsertWithoutFK_UserOnStudyGroupInput: ["update", "create"],
  StudyGroupUpdateWithoutFK_UserOnStudyGroupInput: ["Name", "FK_User"],
  UserCreateWithoutFK_StudyGroupsInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_StudyGroupsInput: ["where", "create"],
  UserOnStudyGroupCreateWithoutFK_StudyGroupInput: ["SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_User"],
  UserOnStudyGroupCreateOrConnectWithoutFK_StudyGroupInput: ["where", "create"],
  UserOnStudyGroupCreateManyFK_StudyGroupInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutFK_StudyGroupsInput: ["update", "create"],
  UserUpdateWithoutFK_StudyGroupsInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserOnStudyGroupUpsertWithWhereUniqueWithoutFK_StudyGroupInput: ["where", "update", "create"],
  UserOnStudyGroupUpdateWithWhereUniqueWithoutFK_StudyGroupInput: ["where", "data"],
  UserOnStudyGroupUpdateManyWithWhereWithoutFK_StudyGroupInput: ["where", "data"],
  UserOnStudyGroupScalarWhereInput: ["AND", "OR", "NOT", "UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID", "FK_StudyGroupID"],
  SchoolCreateWithoutFK_UserInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_Professor", "Term"],
  SchoolCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  TermCreateWithoutFK_UserInput: ["CreatedTime", "TermType", "TermName", "FK_School", "FK_CourseOnTerm"],
  TermCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  TermCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  TaskCreateWithoutFK_UserInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_Flow", "FK_CourseOnTerm", "FK_Repetition"],
  TaskCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  TaskCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  SettingCreateWithoutFK_UserInput: ["HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt"],
  SettingCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  FlowViewCreateWithoutFK_UserInput: ["CreatedTime", "FK_Flow"],
  FlowViewCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  FlowViewCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  FlowCreateWithoutFK_UserInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_Repetition"],
  FlowCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  FlowCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  AutomationCreateWithoutFK_UserInput: ["RefreshToken", "CourseOnTermAutomations"],
  AutomationCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  AutomationCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  StudyGroupCreateWithoutFK_UserInput: ["Name", "FK_UserOnStudyGroup"],
  StudyGroupCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  StudyGroupCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  UserOnStudyGroupCreateWithoutFK_UserInput: ["SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_StudyGroup"],
  UserOnStudyGroupCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  UserOnStudyGroupCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  FriendshipCreateWithoutFK_UserFromInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserTo"],
  FriendshipCreateOrConnectWithoutFK_UserFromInput: ["where", "create"],
  FriendshipCreateManyFK_UserFromInputEnvelope: ["data", "skipDuplicates"],
  FriendshipCreateWithoutFK_UserToInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFrom"],
  FriendshipCreateOrConnectWithoutFK_UserToInput: ["where", "create"],
  FriendshipCreateManyFK_UserToInputEnvelope: ["data", "skipDuplicates"],
  BlogCreateWithoutFK_UserInput: ["BlogID", "CreatedTime", "DeletedTime", "Title", "Body"],
  BlogCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  BlogCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  BugReportCreateWithoutFK_UserInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "Title", "Body"],
  BugReportCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  BugReportCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  FeatureRequestCreateWithoutFK_UserInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "Title", "Body"],
  FeatureRequestCreateOrConnectWithoutFK_UserInput: ["where", "create"],
  FeatureRequestCreateManyFK_UserInputEnvelope: ["data", "skipDuplicates"],
  SchoolUpsertWithoutFK_UserInput: ["update", "create"],
  SchoolUpdateWithoutFK_UserInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_Professor", "Term"],
  TermUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  TermUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  TermUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  TermScalarWhereInput: ["AND", "OR", "NOT", "TermID", "CreatedTime", "TermType", "TermName", "FK_UserID", "FK_SchoolID"],
  TaskUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  TaskUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  TaskUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  TaskScalarWhereInput: ["AND", "OR", "NOT", "TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  SettingUpsertWithoutFK_UserInput: ["update", "create"],
  SettingUpdateWithoutFK_UserInput: ["HasSeenWelcomeMessage", "LastSeenWelcomeMessageAt"],
  FlowViewUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  FlowViewUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  FlowViewUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  FlowViewScalarWhereInput: ["AND", "OR", "NOT", "FlowViewID", "CreatedTime", "FK_FlowID", "FK_UserID"],
  FlowUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  FlowUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  FlowUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  FlowScalarWhereInput: ["AND", "OR", "NOT", "FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID", "FK_UserID"],
  AutomationUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  AutomationUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  AutomationUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  AutomationScalarWhereInput: ["AND", "OR", "NOT", "AutomationID", "RefreshToken", "FK_UserID"],
  StudyGroupUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  StudyGroupUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  StudyGroupUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  StudyGroupScalarWhereInput: ["AND", "OR", "NOT", "StudyGroupID", "Name", "FK_UserID"],
  UserOnStudyGroupUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  UserOnStudyGroupUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  UserOnStudyGroupUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  FriendshipUpsertWithWhereUniqueWithoutFK_UserFromInput: ["where", "update", "create"],
  FriendshipUpdateWithWhereUniqueWithoutFK_UserFromInput: ["where", "data"],
  FriendshipUpdateManyWithWhereWithoutFK_UserFromInput: ["where", "data"],
  FriendshipScalarWhereInput: ["AND", "OR", "NOT", "FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID", "FK_UserToID"],
  FriendshipUpsertWithWhereUniqueWithoutFK_UserToInput: ["where", "update", "create"],
  FriendshipUpdateWithWhereUniqueWithoutFK_UserToInput: ["where", "data"],
  FriendshipUpdateManyWithWhereWithoutFK_UserToInput: ["where", "data"],
  BlogUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  BlogUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  BlogUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  BlogScalarWhereInput: ["AND", "OR", "NOT", "BlogID", "CreatedTime", "DeletedTime", "FK_UserID", "Title", "Body"],
  BugReportUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  BugReportUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  BugReportUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  BugReportScalarWhereInput: ["AND", "OR", "NOT", "BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "FK_UserID", "Title", "Body"],
  FeatureRequestUpsertWithWhereUniqueWithoutFK_UserInput: ["where", "update", "create"],
  FeatureRequestUpdateWithWhereUniqueWithoutFK_UserInput: ["where", "data"],
  FeatureRequestUpdateManyWithWhereWithoutFK_UserInput: ["where", "data"],
  FeatureRequestScalarWhereInput: ["AND", "OR", "NOT", "FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "FK_UserID", "Title", "Body"],
  UserCreateWithoutFK_TermsInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_TermsInput: ["where", "create"],
  SchoolCreateWithoutTermInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_User", "FK_Professor"],
  SchoolCreateOrConnectWithoutTermInput: ["where", "create"],
  CourseOnTermCreateWithoutFK_TermInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermCreateOrConnectWithoutFK_TermInput: ["where", "create"],
  CourseOnTermCreateManyFK_TermInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutFK_TermsInput: ["update", "create"],
  UserUpdateWithoutFK_TermsInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  SchoolUpsertWithoutTermInput: ["update", "create"],
  SchoolUpdateWithoutTermInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_User", "FK_Professor"],
  CourseOnTermUpsertWithWhereUniqueWithoutFK_TermInput: ["where", "update", "create"],
  CourseOnTermUpdateWithWhereUniqueWithoutFK_TermInput: ["where", "data"],
  CourseOnTermUpdateManyWithWhereWithoutFK_TermInput: ["where", "data"],
  CourseOnTermScalarWhereInput: ["AND", "OR", "NOT", "CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID", "FK_TermID"],
  SchoolCreateWithoutFK_CourseInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_User", "FK_Professor", "Term"],
  SchoolCreateOrConnectWithoutFK_CourseInput: ["where", "create"],
  ProfessorCreateWithoutFK_CoursesInput: ["FK_School", "Name", "Email"],
  ProfessorCreateOrConnectWithoutFK_CoursesInput: ["where", "create"],
  CourseOnTermCreateWithoutFK_CourseInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Term", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermCreateOrConnectWithoutFK_CourseInput: ["where", "create"],
  CourseOnTermCreateManyFK_CourseInputEnvelope: ["data", "skipDuplicates"],
  SchoolUpsertWithoutFK_CourseInput: ["update", "create"],
  SchoolUpdateWithoutFK_CourseInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_User", "FK_Professor", "Term"],
  ProfessorUpsertWithoutFK_CoursesInput: ["update", "create"],
  ProfessorUpdateWithoutFK_CoursesInput: ["FK_School", "Name", "Email"],
  CourseOnTermUpsertWithWhereUniqueWithoutFK_CourseInput: ["where", "update", "create"],
  CourseOnTermUpdateWithWhereUniqueWithoutFK_CourseInput: ["where", "data"],
  CourseOnTermUpdateManyWithWhereWithoutFK_CourseInput: ["where", "data"],
  CourseCreateWithoutCourseOnTermInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_School", "FK_Professor"],
  CourseCreateOrConnectWithoutCourseOnTermInput: ["where", "create"],
  TermCreateWithoutFK_CourseOnTermInput: ["CreatedTime", "TermType", "TermName", "FK_User", "FK_School"],
  TermCreateOrConnectWithoutFK_CourseOnTermInput: ["where", "create"],
  FlowCreateWithoutFK_CourseOnTermInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User", "FK_Repetition"],
  FlowCreateOrConnectWithoutFK_CourseOnTermInput: ["where", "create"],
  FlowCreateManyFK_CourseOnTermInputEnvelope: ["data", "skipDuplicates"],
  TaskCreateWithoutFK_CourseOnTermInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_Flow", "FK_Repetition"],
  TaskCreateOrConnectWithoutFK_CourseOnTermInput: ["where", "create"],
  TaskCreateManyFK_CourseOnTermInputEnvelope: ["data", "skipDuplicates"],
  CourseOnTermAutomationCreateWithoutFK_CourseOnTermInput: ["FolderID", "DefaultType", "DefaultVisibility", "AutomationLog", "FK_Automation"],
  CourseOnTermAutomationCreateOrConnectWithoutFK_CourseOnTermInput: ["where", "create"],
  CourseOnTermAutomationCreateManyFK_CourseOnTermInputEnvelope: ["data", "skipDuplicates"],
  CourseUpsertWithoutCourseOnTermInput: ["update", "create"],
  CourseUpdateWithoutCourseOnTermInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_School", "FK_Professor"],
  TermUpsertWithoutFK_CourseOnTermInput: ["update", "create"],
  TermUpdateWithoutFK_CourseOnTermInput: ["CreatedTime", "TermType", "TermName", "FK_User", "FK_School"],
  FlowUpsertWithWhereUniqueWithoutFK_CourseOnTermInput: ["where", "update", "create"],
  FlowUpdateWithWhereUniqueWithoutFK_CourseOnTermInput: ["where", "data"],
  FlowUpdateManyWithWhereWithoutFK_CourseOnTermInput: ["where", "data"],
  TaskUpsertWithWhereUniqueWithoutFK_CourseOnTermInput: ["where", "update", "create"],
  TaskUpdateWithWhereUniqueWithoutFK_CourseOnTermInput: ["where", "data"],
  TaskUpdateManyWithWhereWithoutFK_CourseOnTermInput: ["where", "data"],
  CourseOnTermAutomationUpsertWithWhereUniqueWithoutFK_CourseOnTermInput: ["where", "update", "create"],
  CourseOnTermAutomationUpdateWithWhereUniqueWithoutFK_CourseOnTermInput: ["where", "data"],
  CourseOnTermAutomationUpdateManyWithWhereWithoutFK_CourseOnTermInput: ["where", "data"],
  CourseCreateWithoutFK_SchoolInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_Professor", "CourseOnTerm"],
  CourseCreateOrConnectWithoutFK_SchoolInput: ["where", "create"],
  CourseCreateManyFK_SchoolInputEnvelope: ["data", "skipDuplicates"],
  UserCreateWithoutFK_SchoolInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_SchoolInput: ["where", "create"],
  UserCreateManyFK_SchoolInputEnvelope: ["data", "skipDuplicates"],
  ProfessorCreateWithoutFK_SchoolInput: ["FK_Courses", "Name", "Email"],
  ProfessorCreateOrConnectWithoutFK_SchoolInput: ["where", "create"],
  ProfessorCreateManyFK_SchoolInputEnvelope: ["data", "skipDuplicates"],
  TermCreateWithoutFK_SchoolInput: ["CreatedTime", "TermType", "TermName", "FK_User", "FK_CourseOnTerm"],
  TermCreateOrConnectWithoutFK_SchoolInput: ["where", "create"],
  TermCreateManyFK_SchoolInputEnvelope: ["data", "skipDuplicates"],
  CourseUpsertWithWhereUniqueWithoutFK_SchoolInput: ["where", "update", "create"],
  CourseUpdateWithWhereUniqueWithoutFK_SchoolInput: ["where", "data"],
  CourseUpdateManyWithWhereWithoutFK_SchoolInput: ["where", "data"],
  CourseScalarWhereInput: ["AND", "OR", "NOT", "CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID", "FK_ProfessorID"],
  UserUpsertWithWhereUniqueWithoutFK_SchoolInput: ["where", "update", "create"],
  UserUpdateWithWhereUniqueWithoutFK_SchoolInput: ["where", "data"],
  UserUpdateManyWithWhereWithoutFK_SchoolInput: ["where", "data"],
  UserScalarWhereInput: ["AND", "OR", "NOT", "UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_SchoolID"],
  ProfessorUpsertWithWhereUniqueWithoutFK_SchoolInput: ["where", "update", "create"],
  ProfessorUpdateWithWhereUniqueWithoutFK_SchoolInput: ["where", "data"],
  ProfessorUpdateManyWithWhereWithoutFK_SchoolInput: ["where", "data"],
  ProfessorScalarWhereInput: ["AND", "OR", "NOT", "ProfessorID", "FK_SchoolID", "Name", "Email"],
  TermUpsertWithWhereUniqueWithoutFK_SchoolInput: ["where", "update", "create"],
  TermUpdateWithWhereUniqueWithoutFK_SchoolInput: ["where", "data"],
  TermUpdateManyWithWhereWithoutFK_SchoolInput: ["where", "data"],
  CourseCreateWithoutFK_ProfessorInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_School", "CourseOnTerm"],
  CourseCreateOrConnectWithoutFK_ProfessorInput: ["where", "create"],
  CourseCreateManyFK_ProfessorInputEnvelope: ["data", "skipDuplicates"],
  SchoolCreateWithoutFK_ProfessorInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_User", "Term"],
  SchoolCreateOrConnectWithoutFK_ProfessorInput: ["where", "create"],
  CourseUpsertWithWhereUniqueWithoutFK_ProfessorInput: ["where", "update", "create"],
  CourseUpdateWithWhereUniqueWithoutFK_ProfessorInput: ["where", "data"],
  CourseUpdateManyWithWhereWithoutFK_ProfessorInput: ["where", "data"],
  SchoolUpsertWithoutFK_ProfessorInput: ["update", "create"],
  SchoolUpdateWithoutFK_ProfessorInput: ["Name", "HasClassSupport", "SearchIndex", "TermType", "FK_Course", "FK_User", "Term"],
  CourseOnTermCreateWithoutFK_FlowsInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Term", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermCreateOrConnectWithoutFK_FlowsInput: ["where", "create"],
  FlashcardStackCreateWithoutFK_FlowInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flashcards", "FK_FlashcardStackReviews", "FK_Repetition", "Title", "Description"],
  FlashcardStackCreateOrConnectWithoutFK_FlowInput: ["where", "create"],
  FlashcardStackCreateManyFK_FlowInputEnvelope: ["data", "skipDuplicates"],
  TaskCreateWithoutFK_FlowInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_CourseOnTerm", "FK_Repetition"],
  TaskCreateOrConnectWithoutFK_FlowInput: ["where", "create"],
  TaskCreateManyFK_FlowInputEnvelope: ["data", "skipDuplicates"],
  FlowViewCreateWithoutFK_FlowInput: ["CreatedTime", "FK_User"],
  FlowViewCreateOrConnectWithoutFK_FlowInput: ["where", "create"],
  FlowViewCreateManyFK_FlowInputEnvelope: ["data", "skipDuplicates"],
  UserCreateWithoutFK_FlowInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_FlowInput: ["where", "create"],
  RepetitionCreateWithoutFK_FlowInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlashcardStack", "FK_Tasks"],
  RepetitionCreateOrConnectWithoutFK_FlowInput: ["where", "create"],
  CourseOnTermUpsertWithoutFK_FlowsInput: ["update", "create"],
  CourseOnTermUpdateWithoutFK_FlowsInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Term", "FK_Tasks", "CourseOnTermAutomation"],
  FlashcardStackUpsertWithWhereUniqueWithoutFK_FlowInput: ["where", "update", "create"],
  FlashcardStackUpdateWithWhereUniqueWithoutFK_FlowInput: ["where", "data"],
  FlashcardStackUpdateManyWithWhereWithoutFK_FlowInput: ["where", "data"],
  FlashcardStackScalarWhereInput: ["AND", "OR", "NOT", "FlashcardStackID", "CreatedTime", "DeletedTime", "FK_FlowID", "Title", "Description"],
  TaskUpsertWithWhereUniqueWithoutFK_FlowInput: ["where", "update", "create"],
  TaskUpdateWithWhereUniqueWithoutFK_FlowInput: ["where", "data"],
  TaskUpdateManyWithWhereWithoutFK_FlowInput: ["where", "data"],
  FlowViewUpsertWithWhereUniqueWithoutFK_FlowInput: ["where", "update", "create"],
  FlowViewUpdateWithWhereUniqueWithoutFK_FlowInput: ["where", "data"],
  FlowViewUpdateManyWithWhereWithoutFK_FlowInput: ["where", "data"],
  UserUpsertWithoutFK_FlowInput: ["update", "create"],
  UserUpdateWithoutFK_FlowInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  RepetitionUpsertWithoutFK_FlowInput: ["update", "create"],
  RepetitionUpdateWithoutFK_FlowInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_FlashcardStack", "FK_Tasks"],
  FlowCreateWithoutFK_FlowViewInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_User", "FK_Repetition"],
  FlowCreateOrConnectWithoutFK_FlowViewInput: ["where", "create"],
  UserCreateWithoutFK_FlowViewInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_FlowViewInput: ["where", "create"],
  FlowUpsertWithoutFK_FlowViewInput: ["update", "create"],
  FlowUpdateWithoutFK_FlowViewInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_User", "FK_Repetition"],
  UserUpsertWithoutFK_FlowViewInput: ["update", "create"],
  UserUpdateWithoutFK_FlowViewInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  FlowCreateWithoutFK_FlashcardStacksInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_Tasks", "FK_FlowView", "FK_User", "FK_Repetition"],
  FlowCreateOrConnectWithoutFK_FlashcardStacksInput: ["where", "create"],
  FlashcardCreateWithoutFK_FlashcardStackInput: ["FlashcardID", "CreatedTime", "DeletedTime", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "FK_FlashcardReviews"],
  FlashcardCreateOrConnectWithoutFK_FlashcardStackInput: ["where", "create"],
  FlashcardCreateManyFK_FlashcardStackInputEnvelope: ["data", "skipDuplicates"],
  FlashcardStackReviewCreateWithoutFK_FlashcardStackInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardReviews"],
  FlashcardStackReviewCreateOrConnectWithoutFK_FlashcardStackInput: ["where", "create"],
  FlashcardStackReviewCreateManyFK_FlashcardStackInputEnvelope: ["data", "skipDuplicates"],
  RepetitionCreateWithoutFK_FlashcardStackInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_Flow", "FK_Tasks"],
  RepetitionCreateOrConnectWithoutFK_FlashcardStackInput: ["where", "create"],
  FlowUpsertWithoutFK_FlashcardStacksInput: ["update", "create"],
  FlowUpdateWithoutFK_FlashcardStacksInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_Tasks", "FK_FlowView", "FK_User", "FK_Repetition"],
  FlashcardUpsertWithWhereUniqueWithoutFK_FlashcardStackInput: ["where", "update", "create"],
  FlashcardUpdateWithWhereUniqueWithoutFK_FlashcardStackInput: ["where", "data"],
  FlashcardUpdateManyWithWhereWithoutFK_FlashcardStackInput: ["where", "data"],
  FlashcardScalarWhereInput: ["AND", "OR", "NOT", "FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStackID", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardStackReviewUpsertWithWhereUniqueWithoutFK_FlashcardStackInput: ["where", "update", "create"],
  FlashcardStackReviewUpdateWithWhereUniqueWithoutFK_FlashcardStackInput: ["where", "data"],
  FlashcardStackReviewUpdateManyWithWhereWithoutFK_FlashcardStackInput: ["where", "data"],
  FlashcardStackReviewScalarWhereInput: ["AND", "OR", "NOT", "FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStackID"],
  RepetitionUpsertWithoutFK_FlashcardStackInput: ["update", "create"],
  RepetitionUpdateWithoutFK_FlashcardStackInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_Flow", "FK_Tasks"],
  FlashcardStackCreateWithoutFK_FlashcardStackReviewsInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_Flashcards", "FK_Repetition", "Title", "Description"],
  FlashcardStackCreateOrConnectWithoutFK_FlashcardStackReviewsInput: ["where", "create"],
  FlashcardReviewCreateWithoutFK_FlashcardStackReviewInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_Flashcard"],
  FlashcardReviewCreateOrConnectWithoutFK_FlashcardStackReviewInput: ["where", "create"],
  FlashcardReviewCreateManyFK_FlashcardStackReviewInputEnvelope: ["data", "skipDuplicates"],
  FlashcardStackUpsertWithoutFK_FlashcardStackReviewsInput: ["update", "create"],
  FlashcardStackUpdateWithoutFK_FlashcardStackReviewsInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_Flashcards", "FK_Repetition", "Title", "Description"],
  FlashcardReviewUpsertWithWhereUniqueWithoutFK_FlashcardStackReviewInput: ["where", "update", "create"],
  FlashcardReviewUpdateWithWhereUniqueWithoutFK_FlashcardStackReviewInput: ["where", "data"],
  FlashcardReviewUpdateManyWithWhereWithoutFK_FlashcardStackReviewInput: ["where", "data"],
  FlashcardReviewScalarWhereInput: ["AND", "OR", "NOT", "FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID", "FK_FlashcardStackReviewID"],
  FlashcardStackCreateWithoutFK_FlashcardsInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_FlashcardStackReviews", "FK_Repetition", "Title", "Description"],
  FlashcardStackCreateOrConnectWithoutFK_FlashcardsInput: ["where", "create"],
  FlashcardReviewCreateWithoutFK_FlashcardInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardStackReview"],
  FlashcardReviewCreateOrConnectWithoutFK_FlashcardInput: ["where", "create"],
  FlashcardReviewCreateManyFK_FlashcardInputEnvelope: ["data", "skipDuplicates"],
  FlashcardStackUpsertWithoutFK_FlashcardsInput: ["update", "create"],
  FlashcardStackUpdateWithoutFK_FlashcardsInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_FlashcardStackReviews", "FK_Repetition", "Title", "Description"],
  FlashcardReviewUpsertWithWhereUniqueWithoutFK_FlashcardInput: ["where", "update", "create"],
  FlashcardReviewUpdateWithWhereUniqueWithoutFK_FlashcardInput: ["where", "data"],
  FlashcardReviewUpdateManyWithWhereWithoutFK_FlashcardInput: ["where", "data"],
  FlashcardCreateWithoutFK_FlashcardReviewsInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStack", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardCreateOrConnectWithoutFK_FlashcardReviewsInput: ["where", "create"],
  FlashcardStackReviewCreateWithoutFK_FlashcardReviewsInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStack"],
  FlashcardStackReviewCreateOrConnectWithoutFK_FlashcardReviewsInput: ["where", "create"],
  FlashcardUpsertWithoutFK_FlashcardReviewsInput: ["update", "create"],
  FlashcardUpdateWithoutFK_FlashcardReviewsInput: ["FlashcardID", "CreatedTime", "DeletedTime", "FK_FlashcardStack", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardStackReviewUpsertWithoutFK_FlashcardReviewsInput: ["update", "create"],
  FlashcardStackReviewUpdateWithoutFK_FlashcardReviewsInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardStack"],
  TaskLabelCreateWithoutFK_TaskInput: ["CreatedTime", "Label"],
  TaskLabelCreateOrConnectWithoutFK_TaskInput: ["where", "create"],
  TaskLabelCreateManyFK_TaskInputEnvelope: ["data", "skipDuplicates"],
  UserCreateWithoutFK_TaskInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_TaskInput: ["where", "create"],
  FlowCreateWithoutFK_TasksInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_FlowView", "FK_User", "FK_Repetition"],
  FlowCreateOrConnectWithoutFK_TasksInput: ["where", "create"],
  CourseOnTermCreateWithoutFK_TasksInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Term", "FK_Flows", "CourseOnTermAutomation"],
  CourseOnTermCreateOrConnectWithoutFK_TasksInput: ["where", "create"],
  RepetitionCreateWithoutFK_TasksInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_Flow", "FK_FlashcardStack"],
  RepetitionCreateOrConnectWithoutFK_TasksInput: ["where", "create"],
  TaskLabelUpsertWithWhereUniqueWithoutFK_TaskInput: ["where", "update", "create"],
  TaskLabelUpdateWithWhereUniqueWithoutFK_TaskInput: ["where", "data"],
  TaskLabelUpdateManyWithWhereWithoutFK_TaskInput: ["where", "data"],
  TaskLabelScalarWhereInput: ["AND", "OR", "NOT", "TaskLabelID", "CreatedTime", "Label", "FK_TaskID"],
  UserUpsertWithoutFK_TaskInput: ["update", "create"],
  UserUpdateWithoutFK_TaskInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  FlowUpsertWithoutFK_TasksInput: ["update", "create"],
  FlowUpdateWithoutFK_TasksInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_FlowView", "FK_User", "FK_Repetition"],
  CourseOnTermUpsertWithoutFK_TasksInput: ["update", "create"],
  CourseOnTermUpdateWithoutFK_TasksInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Term", "FK_Flows", "CourseOnTermAutomation"],
  RepetitionUpsertWithoutFK_TasksInput: ["update", "create"],
  RepetitionUpdateWithoutFK_TasksInput: ["RepetitionID", "CreatedTime", "DeletedTime", "RepetitionType", "FK_Flow", "FK_FlashcardStack"],
  TaskCreateWithoutFK_TaskLabelInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_User", "FK_Flow", "FK_CourseOnTerm", "FK_Repetition"],
  TaskCreateOrConnectWithoutFK_TaskLabelInput: ["where", "create"],
  TaskUpsertWithoutFK_TaskLabelInput: ["update", "create"],
  TaskUpdateWithoutFK_TaskLabelInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_User", "FK_Flow", "FK_CourseOnTerm", "FK_Repetition"],
  FlowCreateWithoutFK_RepetitionInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User"],
  FlowCreateOrConnectWithoutFK_RepetitionInput: ["where", "create"],
  FlashcardStackCreateWithoutFK_RepetitionInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_Flashcards", "FK_FlashcardStackReviews", "Title", "Description"],
  FlashcardStackCreateOrConnectWithoutFK_RepetitionInput: ["where", "create"],
  TaskCreateWithoutFK_RepetitionInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_Flow", "FK_CourseOnTerm"],
  TaskCreateOrConnectWithoutFK_RepetitionInput: ["where", "create"],
  TaskCreateManyFK_RepetitionInputEnvelope: ["data", "skipDuplicates"],
  FlowUpsertWithoutFK_RepetitionInput: ["update", "create"],
  FlowUpdateWithoutFK_RepetitionInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User"],
  FlashcardStackUpsertWithoutFK_RepetitionInput: ["update", "create"],
  FlashcardStackUpdateWithoutFK_RepetitionInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flow", "FK_Flashcards", "FK_FlashcardStackReviews", "Title", "Description"],
  TaskUpsertWithWhereUniqueWithoutFK_RepetitionInput: ["where", "update", "create"],
  TaskUpdateWithWhereUniqueWithoutFK_RepetitionInput: ["where", "data"],
  TaskUpdateManyWithWhereWithoutFK_RepetitionInput: ["where", "data"],
  UserCreateWithoutFK_BlogInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_BlogInput: ["where", "create"],
  UserUpsertWithoutFK_BlogInput: ["update", "create"],
  UserUpdateWithoutFK_BlogInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_BugReport", "FK_FeatureRequest"],
  UserCreateWithoutFK_BugReportInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_FeatureRequest"],
  UserCreateOrConnectWithoutFK_BugReportInput: ["where", "create"],
  UserUpsertWithoutFK_BugReportInput: ["update", "create"],
  UserUpdateWithoutFK_BugReportInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_FeatureRequest"],
  UserCreateWithoutFK_FeatureRequestInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport"],
  UserCreateOrConnectWithoutFK_FeatureRequestInput: ["where", "create"],
  UserUpsertWithoutFK_FeatureRequestInput: ["update", "create"],
  UserUpdateWithoutFK_FeatureRequestInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_School", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport"],
  AutomationLogCreateManyFK_CourseOnTermAutomationInput: ["AutomationLogID", "Time", "Success", "Message", "FileID"],
  AutomationLogUpdateWithoutFK_CourseOnTermAutomationInput: ["Time", "Success", "Message", "FileID"],
  CourseOnTermAutomationCreateManyFK_AutomationInput: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_CourseOnTermID"],
  CourseOnTermAutomationUpdateWithoutFK_AutomationInput: ["FolderID", "DefaultType", "DefaultVisibility", "AutomationLog", "FK_CourseOnTerm"],
  UserOnStudyGroupCreateManyFK_StudyGroupInput: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserID"],
  UserOnStudyGroupUpdateWithoutFK_StudyGroupInput: ["SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_User"],
  TermCreateManyFK_UserInput: ["TermID", "CreatedTime", "TermType", "TermName", "FK_SchoolID"],
  TaskCreateManyFK_UserInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_FlowID", "FK_CourseOnTermID", "FK_RepetitionID"],
  FlowViewCreateManyFK_UserInput: ["FlowViewID", "CreatedTime", "FK_FlowID"],
  FlowCreateManyFK_UserInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTermID"],
  AutomationCreateManyFK_UserInput: ["AutomationID", "RefreshToken"],
  StudyGroupCreateManyFK_UserInput: ["StudyGroupID", "Name"],
  UserOnStudyGroupCreateManyFK_UserInput: ["UserOnStudyGroupID", "SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_StudyGroupID"],
  FriendshipCreateManyFK_UserFromInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserToID"],
  FriendshipCreateManyFK_UserToInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFromID"],
  BlogCreateManyFK_UserInput: ["BlogID", "CreatedTime", "DeletedTime", "Title", "Body"],
  BugReportCreateManyFK_UserInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "Title", "Body"],
  FeatureRequestCreateManyFK_UserInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "Title", "Body"],
  TermUpdateWithoutFK_UserInput: ["CreatedTime", "TermType", "TermName", "FK_School", "FK_CourseOnTerm"],
  TaskUpdateWithoutFK_UserInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_Flow", "FK_CourseOnTerm", "FK_Repetition"],
  FlowViewUpdateWithoutFK_UserInput: ["CreatedTime", "FK_Flow"],
  FlowUpdateWithoutFK_UserInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_CourseOnTerm", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_Repetition"],
  AutomationUpdateWithoutFK_UserInput: ["RefreshToken", "CourseOnTermAutomations"],
  StudyGroupUpdateWithoutFK_UserInput: ["Name", "FK_UserOnStudyGroup"],
  UserOnStudyGroupUpdateWithoutFK_UserInput: ["SendTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_StudyGroup"],
  FriendshipUpdateWithoutFK_UserFromInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserTo"],
  FriendshipUpdateWithoutFK_UserToInput: ["FriendshipID", "SentTime", "AcceptedTime", "RejectedTime", "RemovedTime", "CanceledTime", "FK_UserFrom"],
  BlogUpdateWithoutFK_UserInput: ["BlogID", "CreatedTime", "DeletedTime", "Title", "Body"],
  BugReportUpdateWithoutFK_UserInput: ["BugReportID", "CreatedTime", "DeletedTime", "FixedTime", "Title", "Body"],
  FeatureRequestUpdateWithoutFK_UserInput: ["FeatureRequestID", "CreatedTime", "DeletedTime", "ImplementedTime", "Title", "Body"],
  CourseOnTermCreateManyFK_TermInput: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_CourseID"],
  CourseOnTermUpdateWithoutFK_TermInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Course", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  CourseOnTermCreateManyFK_CourseInput: ["CourseOnTermID", "CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_TermID"],
  CourseOnTermUpdateWithoutFK_CourseInput: ["CreatedTime", "Index", "Color", "Nickname", "IsNew", "FK_Term", "FK_Flows", "FK_Tasks", "CourseOnTermAutomation"],
  FlowCreateManyFK_CourseOnTermInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_UserID"],
  TaskCreateManyFK_CourseOnTermInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_RepetitionID"],
  CourseOnTermAutomationCreateManyFK_CourseOnTermInput: ["CourseOnTermAutomationID", "FolderID", "DefaultType", "DefaultVisibility", "FK_AutomationID"],
  FlowUpdateWithoutFK_CourseOnTermInput: ["FlowID", "CreatedTime", "LastOpened", "UserEnteredDate", "Type", "Title", "Trashed", "Visibility", "WasAutomated", "Body", "DeletedTime", "FK_FlashcardStacks", "FK_Tasks", "FK_FlowView", "FK_User", "FK_Repetition"],
  TaskUpdateWithoutFK_CourseOnTermInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_Flow", "FK_Repetition"],
  CourseOnTermAutomationUpdateWithoutFK_CourseOnTermInput: ["FolderID", "DefaultType", "DefaultVisibility", "AutomationLog", "FK_Automation"],
  CourseCreateManyFK_SchoolInput: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_ProfessorID"],
  UserCreateManyFK_SchoolInput: ["UserID", "CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess"],
  ProfessorCreateManyFK_SchoolInput: ["ProfessorID", "Name", "Email"],
  TermCreateManyFK_SchoolInput: ["TermID", "CreatedTime", "TermType", "TermName", "FK_UserID"],
  CourseUpdateWithoutFK_SchoolInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_Professor", "CourseOnTerm"],
  UserUpdateWithoutFK_SchoolInput: ["CreatedTime", "SetupStep", "SupabaseID", "DefaultVisibility", "Email", "Bio", "About", "Name", "Username", "ProfilePictureLink", "HasRequestedAutomationAccess", "HasAutomationAccess", "FK_Terms", "FK_Task", "FK_Settings", "FK_FlowView", "FK_Flow", "FK_Automation", "FK_StudyGroups", "FK_UserOnStudyGroups", "FK_FriendshipsInitiated", "FK_FriendshipsAccepted", "FK_Blog", "FK_BugReport", "FK_FeatureRequest"],
  ProfessorUpdateWithoutFK_SchoolInput: ["FK_Courses", "Name", "Email"],
  TermUpdateWithoutFK_SchoolInput: ["CreatedTime", "TermType", "TermName", "FK_User", "FK_CourseOnTerm"],
  CourseCreateManyFK_ProfessorInput: ["CourseID", "CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_SchoolID"],
  CourseUpdateWithoutFK_ProfessorInput: ["CreatedTime", "IsOfficial", "Term", "Code", "Title", "FK_School", "CourseOnTerm"],
  FlashcardStackCreateManyFK_FlowInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "Title", "Description"],
  TaskCreateManyFK_FlowInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_CourseOnTermID", "FK_RepetitionID"],
  FlowViewCreateManyFK_FlowInput: ["FlowViewID", "CreatedTime", "FK_UserID"],
  FlashcardStackUpdateWithoutFK_FlowInput: ["FlashcardStackID", "CreatedTime", "DeletedTime", "FK_Flashcards", "FK_FlashcardStackReviews", "FK_Repetition", "Title", "Description"],
  TaskUpdateWithoutFK_FlowInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_CourseOnTerm", "FK_Repetition"],
  FlowViewUpdateWithoutFK_FlowInput: ["CreatedTime", "FK_User"],
  FlashcardCreateManyFK_FlashcardStackInput: ["FlashcardID", "CreatedTime", "DeletedTime", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl"],
  FlashcardStackReviewCreateManyFK_FlashcardStackInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime"],
  FlashcardUpdateWithoutFK_FlashcardStackInput: ["FlashcardID", "CreatedTime", "DeletedTime", "Position", "Front", "FrontImageUrl", "Back", "BackImageUrl", "FK_FlashcardReviews"],
  FlashcardStackReviewUpdateWithoutFK_FlashcardStackInput: ["FlashcardStackReviewID", "CreatedTime", "EndTime", "FK_FlashcardReviews"],
  FlashcardReviewCreateManyFK_FlashcardStackReviewInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardID"],
  FlashcardReviewUpdateWithoutFK_FlashcardStackReviewInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_Flashcard"],
  FlashcardReviewCreateManyFK_FlashcardInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardStackReviewID"],
  FlashcardReviewUpdateWithoutFK_FlashcardInput: ["FlashcardReviewID", "CreatedTime", "Status", "FK_FlashcardStackReview"],
  TaskLabelCreateManyFK_TaskInput: ["TaskLabelID", "CreatedTime", "Label"],
  TaskLabelUpdateWithoutFK_TaskInput: ["CreatedTime", "Label"],
  TaskCreateManyFK_RepetitionInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_UserID", "FK_FlowID", "FK_CourseOnTermID"],
  TaskUpdateWithoutFK_RepetitionInput: ["TaskID", "CreatedTime", "Title", "Completed", "Description", "DueDate", "Type", "FK_TaskLabel", "FK_User", "FK_Flow", "FK_CourseOnTerm"]
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<
  TInput extends InputTypesNames
  > = FieldsConfig<InputTypeFieldNames<TInput>>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName = inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}

