Project Studyflow {
  database_type: 'PostgreSQL'
  Note: 'DBML Documentation for https://studyflow.ai.'
}

/*
    NAMING CONVENTIONS:
    Use PascalCase for everthing
        TABLES: Plural, PascalCase (Users)
        COLUMNS: Singular, PascalCase (User, FirstName)
        PRIMARYKEY: Singular TableName with ID after (UserID)
        FOREIGNKEYS: FKREFERENCETABLESINGULAR (FKUser)
*/

Table Users {
  UserID integer [pk, increment]
  FKSettings integer [ref: - Settings.SettingID, note: "Relation to the user's settings"]
  Email nvarchar [note: 'Email from their connected Google account from Firebase Auth (that is all we have for now)']
  UID nvarchar [note: 'Unique uid provided by Firebase authentication']
  DisplayName nvarchar [note: 'Default: name on their Google account. They will be able to edit this.']
  ProfilePictureLink nvarchar [note: 'Default: link to their Google profile picture. They will be able to upload a new one, which is stored in FireStore and linked here.']
  Note: 'Stores user information.'
}


Table Settings {
  SettingID integer [pk, increment]
  DefaultVisibility integer [note: "Whether or not the student's flows will automatically be made public, private, or hidden (0, 1, 2) respectively"]
  Note: 'Stores user settings.'
}

Table Flows {
  FlowID int [pk, increment]
  FKUser integer [ref: > Users.UserID, note: 'Relation to the user who made the note.']
  FKClass integer [ref: < Classes.ClassID, note: 'Relation with Class associated with this note.']
  Title nvarchar [note: 'Title of the note. Default: name of causing cloud file']
  Body nvarchar [note: 'HTML of the flowbody'] 
  CreatedTime timestamp [note: 'When this flow was created (not the causing file)']
  Visibility integer [note: 'Whether or not this flow will be public, private, or hidden (0, 1, 2) respectively.']
  Note: 'Stores Flows and related information.'
}

Table FlowViews {
  FlowViewID int [pk, increment]
  FKFlow integer [ref: > Flows.FlowID]
  FKUser integer [ref: > Users.UserID]
  ViewedTime timestamp
  Note: 'Tracks flow views.'
}

Table Schools {
  SchoolID int [pk, increment]
  FKUser int [ref: > Users.UserID] //who entered the school (userid 1 for admin)
  SchoolName nvarchar
  HasClassSupport boolean
  Note: 'Stores schools.'
}

Table Classes {
  ClassID integer [pk, increment]
  FKSchool integer [ref: > Schools.SchoolID]
  FKProfessor integer [ref: < Professors.ProfessorID]
  FKUser integer [ref: < Users.UserID]
  IsOfficial boolean 
  Code nvarchar
  Name nvarchar
  Term nvarchar
  Note: 'Stores officially supported classes.'
}

Table UserClasses {
  UserClassID integer [pk, increment]
  FKUser int [ref: > Users.UserID]
  FKClass int [ref: > Classes.ClassID]
}

Table ClassGroups {
  ClassGroupID integer [pk, increment]
  FKUser integer [ref: > Users.UserID]
  FKUserClass integer [ref: > UserClasses.UserClassID]
  Title nvarchar
}

Table Professors {
  ProfessorID int [pk, increment]
  FKUser integer [ref: > Users.UserID]//who entered the professor (userid 1 for admin)
  Name nvarchar 
  Note: 'Stores professors.'
}

Table Tasks {
  TaskID int [pk, increment]
  FKUsers integer [ref: > Users.UserID]
  FKFlow integer [ref: > Flows.FlowID]
  CreatedTime timestamp
  DueDate date
  Status integer
  Title nvarchar
  Description nvarchar
  Note: 'Stores tasks and related information.'
}

Table Subtasks {
  subtaskID int [pk, increment]
  FKTask integer [ref: > Tasks.TaskID]
  CreatedTime timestamp
  DueDate date
  Status integer
  Title nvarchar
  Description nvarchar
  Note: 'Stores subtasks'
}

Table Labels {
  LabelID int [pk, increment]
  Name nvarchar
  Color nvarchar
  Note: 'Stores labels for tasks'
}

Table LabeledTasks {
  labeledTaskID int [pk, increment]
  FKTask integer [ref: > Tasks.TaskID]
  FKLabel integer [ref: > Labels.LabelID]
  Note: 'Join table for tasks and labels'
}

Table LabeledSubtasks {
  LabeledSubtaskID int [pk, increment]
  FKSubtask integer [ref: > Subtasks.subtaskID]
  FKLabel integer [ref: > Labels.LabelID]
  Note: 'Join table for subtasks and labels'
}

Table FlashcardStacks {
  FlashcardStackID int [pk, increment]
  FKUser integer [ref: > Users.UserID]
  FKFlow integer [ref: > Flows.FlowID]
  Note: 'Stores stacks (parent groupings) of flashcards'
}

Table Flashcards {
  FlashcardID int [pk, increment]
  FKFlashcardStack integer [ref: > FlashcardStacks.FlashcardStackID]
  Position integer
  Front nvarchar
  Back nvarchar
  Note: 'Stores flashcards which relate to a flashcard stack.'
}