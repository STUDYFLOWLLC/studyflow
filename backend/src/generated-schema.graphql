# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateFlow {
  _avg: FlowAvgAggregate
  _count: FlowCountAggregate
  _max: FlowMaxAggregate
  _min: FlowMinAggregate
  _sum: FlowSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumVisibilityNullableFilter {
  equals: Visibility
  in: [Visibility!]
  not: NestedEnumVisibilityNullableFilter
  notIn: [Visibility!]
}

input EnumVisibilityNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumVisibilityNullableFilter
  _min: NestedEnumVisibilityNullableFilter
  equals: Visibility
  in: [Visibility!]
  not: NestedEnumVisibilityNullableWithAggregatesFilter
  notIn: [Visibility!]
}

type Flow {
  Body: String
  CreatedById: Int
  CreatedByUser: User
  CreatedTime: DateTime!
  FlowID: Int!
  Title: String
  Visibility: Visibility
}

type FlowAvgAggregate {
  CreatedById: Float
  FlowID: Float
}

input FlowAvgOrderByAggregateInput {
  CreatedById: SortOrder
  FlowID: SortOrder
}

type FlowCountAggregate {
  Body: Int!
  CreatedById: Int!
  CreatedTime: Int!
  FlowID: Int!
  Title: Int!
  Visibility: Int!
  _all: Int!
}

input FlowCountOrderByAggregateInput {
  Body: SortOrder
  CreatedById: SortOrder
  CreatedTime: SortOrder
  FlowID: SortOrder
  Title: SortOrder
  Visibility: SortOrder
}

input FlowCreateInput {
  Body: String
  CreatedByUser: UserCreateNestedOneWithoutFlowsInput
  CreatedTime: DateTime
  Title: String
  Visibility: Visibility
}

input FlowCreateManyCreatedByUserInput {
  Body: String
  CreatedTime: DateTime
  FlowID: Int
  Title: String
  Visibility: Visibility
}

input FlowCreateManyCreatedByUserInputEnvelope {
  data: [FlowCreateManyCreatedByUserInput!]!
  skipDuplicates: Boolean
}

input FlowCreateManyInput {
  Body: String
  CreatedById: Int
  CreatedTime: DateTime
  FlowID: Int
  Title: String
  Visibility: Visibility
}

input FlowCreateNestedManyWithoutCreatedByUserInput {
  connect: [FlowWhereUniqueInput!]
  connectOrCreate: [FlowCreateOrConnectWithoutCreatedByUserInput!]
  create: [FlowCreateWithoutCreatedByUserInput!]
  createMany: FlowCreateManyCreatedByUserInputEnvelope
}

input FlowCreateOrConnectWithoutCreatedByUserInput {
  create: FlowCreateWithoutCreatedByUserInput!
  where: FlowWhereUniqueInput!
}

input FlowCreateWithoutCreatedByUserInput {
  Body: String
  CreatedTime: DateTime
  Title: String
  Visibility: Visibility
}

type FlowGroupBy {
  Body: String
  CreatedById: Int
  CreatedTime: DateTime!
  FlowID: Int!
  Title: String
  Visibility: Visibility
  _avg: FlowAvgAggregate
  _count: FlowCountAggregate
  _max: FlowMaxAggregate
  _min: FlowMinAggregate
  _sum: FlowSumAggregate
}

input FlowListRelationFilter {
  every: FlowWhereInput
  none: FlowWhereInput
  some: FlowWhereInput
}

type FlowMaxAggregate {
  Body: String
  CreatedById: Int
  CreatedTime: DateTime
  FlowID: Int
  Title: String
  Visibility: Visibility
}

input FlowMaxOrderByAggregateInput {
  Body: SortOrder
  CreatedById: SortOrder
  CreatedTime: SortOrder
  FlowID: SortOrder
  Title: SortOrder
  Visibility: SortOrder
}

type FlowMinAggregate {
  Body: String
  CreatedById: Int
  CreatedTime: DateTime
  FlowID: Int
  Title: String
  Visibility: Visibility
}

input FlowMinOrderByAggregateInput {
  Body: SortOrder
  CreatedById: SortOrder
  CreatedTime: SortOrder
  FlowID: SortOrder
  Title: SortOrder
  Visibility: SortOrder
}

input FlowOrderByRelationAggregateInput {
  _count: SortOrder
}

input FlowOrderByWithAggregationInput {
  Body: SortOrder
  CreatedById: SortOrder
  CreatedTime: SortOrder
  FlowID: SortOrder
  Title: SortOrder
  Visibility: SortOrder
  _avg: FlowAvgOrderByAggregateInput
  _count: FlowCountOrderByAggregateInput
  _max: FlowMaxOrderByAggregateInput
  _min: FlowMinOrderByAggregateInput
  _sum: FlowSumOrderByAggregateInput
}

input FlowOrderByWithRelationInput {
  Body: SortOrder
  CreatedById: SortOrder
  CreatedByUser: UserOrderByWithRelationInput
  CreatedTime: SortOrder
  FlowID: SortOrder
  Title: SortOrder
  Visibility: SortOrder
}

enum FlowScalarFieldEnum {
  Body
  CreatedById
  CreatedTime
  FlowID
  Title
  Visibility
}

input FlowScalarWhereInput {
  AND: [FlowScalarWhereInput!]
  Body: StringNullableFilter
  CreatedById: IntNullableFilter
  CreatedTime: DateTimeFilter
  FlowID: IntFilter
  NOT: [FlowScalarWhereInput!]
  OR: [FlowScalarWhereInput!]
  Title: StringNullableFilter
  Visibility: EnumVisibilityNullableFilter
}

input FlowScalarWhereWithAggregatesInput {
  AND: [FlowScalarWhereWithAggregatesInput!]
  Body: StringNullableWithAggregatesFilter
  CreatedById: IntNullableWithAggregatesFilter
  CreatedTime: DateTimeWithAggregatesFilter
  FlowID: IntWithAggregatesFilter
  NOT: [FlowScalarWhereWithAggregatesInput!]
  OR: [FlowScalarWhereWithAggregatesInput!]
  Title: StringNullableWithAggregatesFilter
  Visibility: EnumVisibilityNullableWithAggregatesFilter
}

type FlowSumAggregate {
  CreatedById: Int
  FlowID: Int
}

input FlowSumOrderByAggregateInput {
  CreatedById: SortOrder
  FlowID: SortOrder
}

input FlowUpdateInput {
  Body: NullableStringFieldUpdateOperationsInput
  CreatedByUser: UserUpdateOneWithoutFlowsInput
  CreatedTime: DateTimeFieldUpdateOperationsInput
  Title: NullableStringFieldUpdateOperationsInput
  Visibility: NullableEnumVisibilityFieldUpdateOperationsInput
}

input FlowUpdateManyMutationInput {
  Body: NullableStringFieldUpdateOperationsInput
  CreatedTime: DateTimeFieldUpdateOperationsInput
  Title: NullableStringFieldUpdateOperationsInput
  Visibility: NullableEnumVisibilityFieldUpdateOperationsInput
}

input FlowUpdateManyWithWhereWithoutCreatedByUserInput {
  data: FlowUpdateManyMutationInput!
  where: FlowScalarWhereInput!
}

input FlowUpdateManyWithoutCreatedByUserInput {
  connect: [FlowWhereUniqueInput!]
  connectOrCreate: [FlowCreateOrConnectWithoutCreatedByUserInput!]
  create: [FlowCreateWithoutCreatedByUserInput!]
  createMany: FlowCreateManyCreatedByUserInputEnvelope
  delete: [FlowWhereUniqueInput!]
  deleteMany: [FlowScalarWhereInput!]
  disconnect: [FlowWhereUniqueInput!]
  set: [FlowWhereUniqueInput!]
  update: [FlowUpdateWithWhereUniqueWithoutCreatedByUserInput!]
  updateMany: [FlowUpdateManyWithWhereWithoutCreatedByUserInput!]
  upsert: [FlowUpsertWithWhereUniqueWithoutCreatedByUserInput!]
}

input FlowUpdateWithWhereUniqueWithoutCreatedByUserInput {
  data: FlowUpdateWithoutCreatedByUserInput!
  where: FlowWhereUniqueInput!
}

input FlowUpdateWithoutCreatedByUserInput {
  Body: NullableStringFieldUpdateOperationsInput
  CreatedTime: DateTimeFieldUpdateOperationsInput
  Title: NullableStringFieldUpdateOperationsInput
  Visibility: NullableEnumVisibilityFieldUpdateOperationsInput
}

input FlowUpsertWithWhereUniqueWithoutCreatedByUserInput {
  create: FlowCreateWithoutCreatedByUserInput!
  update: FlowUpdateWithoutCreatedByUserInput!
  where: FlowWhereUniqueInput!
}

input FlowWhereInput {
  AND: [FlowWhereInput!]
  Body: StringNullableFilter
  CreatedById: IntNullableFilter
  CreatedByUser: UserRelationFilter
  CreatedTime: DateTimeFilter
  FlowID: IntFilter
  NOT: [FlowWhereInput!]
  OR: [FlowWhereInput!]
  Title: StringNullableFilter
  Visibility: EnumVisibilityNullableFilter
}

input FlowWhereUniqueInput {
  FlowID: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createFlow(data: FlowCreateInput!): Flow!
  createManyFlow(data: [FlowCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createUser(data: UserCreateInput!): User!
  deleteFlow(where: FlowWhereUniqueInput!): Flow
  deleteManyFlow(where: FlowWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteUser(where: UserWhereUniqueInput!): User
  updateFlow(data: FlowUpdateInput!, where: FlowWhereUniqueInput!): Flow
  updateManyFlow(data: FlowUpdateManyMutationInput!, where: FlowWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertFlow(create: FlowCreateInput!, update: FlowUpdateInput!, where: FlowWhereUniqueInput!): Flow!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumVisibilityNullableFilter {
  equals: Visibility
  in: [Visibility!]
  not: NestedEnumVisibilityNullableFilter
  notIn: [Visibility!]
}

input NestedEnumVisibilityNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumVisibilityNullableFilter
  _min: NestedEnumVisibilityNullableFilter
  equals: Visibility
  in: [Visibility!]
  not: NestedEnumVisibilityNullableWithAggregatesFilter
  notIn: [Visibility!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableEnumVisibilityFieldUpdateOperationsInput {
  set: Visibility
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateFlow(cursor: FlowWhereUniqueInput, orderBy: [FlowOrderByWithRelationInput!], skip: Int, take: Int, where: FlowWhereInput): AggregateFlow!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstFlow(cursor: FlowWhereUniqueInput, distinct: [FlowScalarFieldEnum!], orderBy: [FlowOrderByWithRelationInput!], skip: Int, take: Int, where: FlowWhereInput): Flow
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  flow(where: FlowWhereUniqueInput!): Flow
  flows(cursor: FlowWhereUniqueInput, distinct: [FlowScalarFieldEnum!], orderBy: [FlowOrderByWithRelationInput!], skip: Int, take: Int, where: FlowWhereInput): [Flow!]!
  groupByFlow(by: [FlowScalarFieldEnum!]!, having: FlowScalarWhereWithAggregatesInput, orderBy: [FlowOrderByWithAggregationInput!], skip: Int, take: Int, where: FlowWhereInput): [FlowGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  DefaultVisibility: Visibility
  DisplayName: String
  Email: String!
  Flows(cursor: FlowWhereUniqueInput, distinct: [FlowScalarFieldEnum!], orderBy: [FlowOrderByWithRelationInput!], skip: Int, take: Int, where: FlowWhereInput): [Flow!]!
  ProfilePictureLink: String
  UID: String
  UserID: Int!
  _count: UserCount
}

type UserAvgAggregate {
  UserID: Float
}

input UserAvgOrderByAggregateInput {
  UserID: SortOrder
}

type UserCount {
  Flows: Int!
}

type UserCountAggregate {
  DefaultVisibility: Int!
  DisplayName: Int!
  Email: Int!
  ProfilePictureLink: Int!
  UID: Int!
  UserID: Int!
  _all: Int!
}

input UserCountOrderByAggregateInput {
  DefaultVisibility: SortOrder
  DisplayName: SortOrder
  Email: SortOrder
  ProfilePictureLink: SortOrder
  UID: SortOrder
  UserID: SortOrder
}

input UserCreateInput {
  DefaultVisibility: Visibility
  DisplayName: String
  Email: String!
  Flows: FlowCreateNestedManyWithoutCreatedByUserInput
  ProfilePictureLink: String
  UID: String
}

input UserCreateManyInput {
  DefaultVisibility: Visibility
  DisplayName: String
  Email: String!
  ProfilePictureLink: String
  UID: String
  UserID: Int
}

input UserCreateNestedOneWithoutFlowsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFlowsInput
  create: UserCreateWithoutFlowsInput
}

input UserCreateOrConnectWithoutFlowsInput {
  create: UserCreateWithoutFlowsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutFlowsInput {
  DefaultVisibility: Visibility
  DisplayName: String
  Email: String!
  ProfilePictureLink: String
  UID: String
}

type UserGroupBy {
  DefaultVisibility: Visibility
  DisplayName: String
  Email: String!
  ProfilePictureLink: String
  UID: String
  UserID: Int!
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type UserMaxAggregate {
  DefaultVisibility: Visibility
  DisplayName: String
  Email: String
  ProfilePictureLink: String
  UID: String
  UserID: Int
}

input UserMaxOrderByAggregateInput {
  DefaultVisibility: SortOrder
  DisplayName: SortOrder
  Email: SortOrder
  ProfilePictureLink: SortOrder
  UID: SortOrder
  UserID: SortOrder
}

type UserMinAggregate {
  DefaultVisibility: Visibility
  DisplayName: String
  Email: String
  ProfilePictureLink: String
  UID: String
  UserID: Int
}

input UserMinOrderByAggregateInput {
  DefaultVisibility: SortOrder
  DisplayName: SortOrder
  Email: SortOrder
  ProfilePictureLink: SortOrder
  UID: SortOrder
  UserID: SortOrder
}

input UserOrderByWithAggregationInput {
  DefaultVisibility: SortOrder
  DisplayName: SortOrder
  Email: SortOrder
  ProfilePictureLink: SortOrder
  UID: SortOrder
  UserID: SortOrder
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
}

input UserOrderByWithRelationInput {
  DefaultVisibility: SortOrder
  DisplayName: SortOrder
  Email: SortOrder
  Flows: FlowOrderByRelationAggregateInput
  ProfilePictureLink: SortOrder
  UID: SortOrder
  UserID: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  DefaultVisibility
  DisplayName
  Email
  ProfilePictureLink
  UID
  UserID
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  DefaultVisibility: EnumVisibilityNullableWithAggregatesFilter
  DisplayName: StringNullableWithAggregatesFilter
  Email: StringWithAggregatesFilter
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  ProfilePictureLink: StringNullableWithAggregatesFilter
  UID: StringNullableWithAggregatesFilter
  UserID: IntWithAggregatesFilter
}

type UserSumAggregate {
  UserID: Int
}

input UserSumOrderByAggregateInput {
  UserID: SortOrder
}

input UserUpdateInput {
  DefaultVisibility: NullableEnumVisibilityFieldUpdateOperationsInput
  DisplayName: NullableStringFieldUpdateOperationsInput
  Email: StringFieldUpdateOperationsInput
  Flows: FlowUpdateManyWithoutCreatedByUserInput
  ProfilePictureLink: NullableStringFieldUpdateOperationsInput
  UID: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  DefaultVisibility: NullableEnumVisibilityFieldUpdateOperationsInput
  DisplayName: NullableStringFieldUpdateOperationsInput
  Email: StringFieldUpdateOperationsInput
  ProfilePictureLink: NullableStringFieldUpdateOperationsInput
  UID: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneWithoutFlowsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFlowsInput
  create: UserCreateWithoutFlowsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutFlowsInput
  upsert: UserUpsertWithoutFlowsInput
}

input UserUpdateWithoutFlowsInput {
  DefaultVisibility: NullableEnumVisibilityFieldUpdateOperationsInput
  DisplayName: NullableStringFieldUpdateOperationsInput
  Email: StringFieldUpdateOperationsInput
  ProfilePictureLink: NullableStringFieldUpdateOperationsInput
  UID: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutFlowsInput {
  create: UserCreateWithoutFlowsInput!
  update: UserUpdateWithoutFlowsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  DefaultVisibility: EnumVisibilityNullableFilter
  DisplayName: StringNullableFilter
  Email: StringFilter
  Flows: FlowListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  ProfilePictureLink: StringNullableFilter
  UID: StringNullableFilter
  UserID: IntFilter
}

input UserWhereUniqueInput {
  UserID: Int
}

enum Visibility {
  HIDDEN
  PRIVATE
  PUBLIC
}
